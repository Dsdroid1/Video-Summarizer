WEBVTT
Kind: captions
Language: en

00:00:00.180 --> 00:00:19.990 align:start position:0%
 
[Music]

00:00:19.990 --> 00:00:20.000 align:start position:0%
 
 

00:00:20.000 --> 00:00:21.349 align:start position:0%
 
hello<00:00:20.240><c> everyone</c>

00:00:21.349 --> 00:00:21.359 align:start position:0%
hello everyone
 

00:00:21.359 --> 00:00:23.349 align:start position:0%
hello everyone
welcome<00:00:22.000><c> to</c><00:00:22.240><c> the</c><00:00:22.320><c> video</c><00:00:22.560><c> lecture</c><00:00:22.880><c> series</c><00:00:23.199><c> of</c>

00:00:23.349 --> 00:00:23.359 align:start position:0%
welcome to the video lecture series of
 

00:00:23.359 --> 00:00:24.870 align:start position:0%
welcome to the video lecture series of
data<00:00:23.680><c> structure</c>

00:00:24.870 --> 00:00:24.880 align:start position:0%
data structure
 

00:00:24.880 --> 00:00:27.269 align:start position:0%
data structure
our<00:00:25.199><c> today's</c><00:00:25.519><c> topic</c><00:00:25.920><c> is</c><00:00:26.480><c> introduction</c><00:00:27.039><c> to</c>

00:00:27.269 --> 00:00:27.279 align:start position:0%
our today's topic is introduction to
 

00:00:27.279 --> 00:00:27.990 align:start position:0%
our today's topic is introduction to
array

00:00:27.990 --> 00:00:28.000 align:start position:0%
array
 

00:00:28.000 --> 00:00:31.109 align:start position:0%
array
and<00:00:28.720><c> wendy</c><00:00:29.199><c> error</c><00:00:29.920><c> representation</c><00:00:30.720><c> of</c>

00:00:31.109 --> 00:00:31.119 align:start position:0%
and wendy error representation of
 

00:00:31.119 --> 00:00:33.910 align:start position:0%
and wendy error representation of
memory<00:00:31.840><c> and</c><00:00:32.160><c> 2d</c><00:00:32.480><c> array</c><00:00:32.719><c> representation</c><00:00:33.760><c> and</c>

00:00:33.910 --> 00:00:33.920 align:start position:0%
memory and 2d array representation and
 

00:00:33.920 --> 00:00:35.190 align:start position:0%
memory and 2d array representation and
we<00:00:34.079><c> will</c><00:00:34.399><c> also</c><00:00:34.719><c> see</c>

00:00:35.190 --> 00:00:35.200 align:start position:0%
we will also see
 

00:00:35.200 --> 00:00:37.350 align:start position:0%
we will also see
about<00:00:35.520><c> the</c><00:00:35.840><c> how</c><00:00:36.000><c> to</c><00:00:36.160><c> calculate</c><00:00:36.719><c> the</c><00:00:36.960><c> memory</c>

00:00:37.350 --> 00:00:37.360 align:start position:0%
about the how to calculate the memory
 

00:00:37.360 --> 00:00:38.310 align:start position:0%
about the how to calculate the memory
address<00:00:37.840><c> for</c>

00:00:38.310 --> 00:00:38.320 align:start position:0%
address for
 

00:00:38.320 --> 00:00:41.830 align:start position:0%
address for
one<00:00:38.480><c> directive</c><00:00:39.840><c> myself</c><00:00:40.719><c> janisha</c>

00:00:41.830 --> 00:00:41.840 align:start position:0%
one directive myself janisha
 

00:00:41.840 --> 00:00:45.190 align:start position:0%
one directive myself janisha
your<00:00:42.480><c> instructor</c><00:00:43.680><c> so</c><00:00:43.920><c> let's</c><00:00:44.239><c> start</c>

00:00:45.190 --> 00:00:45.200 align:start position:0%
your instructor so let's start
 

00:00:45.200 --> 00:00:48.389 align:start position:0%
your instructor so let's start
with<00:00:45.360><c> the</c><00:00:45.600><c> outlines</c><00:00:46.879><c> see</c><00:00:47.680><c> however</c>

00:00:48.389 --> 00:00:48.399 align:start position:0%
with the outlines see however
 

00:00:48.399 --> 00:00:51.430 align:start position:0%
with the outlines see however
today's<00:00:48.960><c> outlines</c><00:00:49.600><c> are</c><00:00:50.239><c> the</c><00:00:50.399><c> first</c>

00:00:51.430 --> 00:00:51.440 align:start position:0%
today's outlines are the first
 

00:00:51.440 --> 00:00:54.790 align:start position:0%
today's outlines are the first
we'll<00:00:51.760><c> gonna</c><00:00:52.079><c> see</c><00:00:52.640><c> about</c><00:00:53.440><c> the</c><00:00:53.680><c> array</c>

00:00:54.790 --> 00:00:54.800 align:start position:0%
we'll gonna see about the array
 

00:00:54.800 --> 00:00:58.709 align:start position:0%
we'll gonna see about the array
then<00:00:55.840><c> memory</c><00:00:56.239><c> representation</c><00:00:57.039><c> in</c><00:00:57.199><c> array</c><00:00:57.920><c> then</c>

00:00:58.709 --> 00:00:58.719 align:start position:0%
then memory representation in array then
 

00:00:58.719 --> 00:01:02.389 align:start position:0%
then memory representation in array then
one<00:00:58.960><c> day</c><00:00:59.760><c> example</c><00:01:00.800><c> memory</c><00:01:01.199><c> representation</c><00:01:02.000><c> of</c>

00:01:02.389 --> 00:01:02.399 align:start position:0%
one day example memory representation of
 

00:01:02.399 --> 00:01:06.070 align:start position:0%
one day example memory representation of
2d8<00:01:03.760><c> so</c><00:01:04.000><c> students</c><00:01:04.960><c> now</c><00:01:05.360><c> it's</c><00:01:05.680><c> time</c>

00:01:06.070 --> 00:01:06.080 align:start position:0%
2d8 so students now it's time
 

00:01:06.080 --> 00:01:08.630 align:start position:0%
2d8 so students now it's time
to<00:01:06.400><c> tell</c><00:01:06.720><c> me</c><00:01:07.040><c> that</c><00:01:07.439><c> what</c><00:01:07.680><c> do</c><00:01:07.840><c> you</c><00:01:08.000><c> mean</c><00:01:08.240><c> by</c><00:01:08.400><c> the</c>

00:01:08.630 --> 00:01:08.640 align:start position:0%
to tell me that what do you mean by the
 

00:01:08.640 --> 00:01:09.590 align:start position:0%
to tell me that what do you mean by the
array

00:01:09.590 --> 00:01:09.600 align:start position:0%
array
 

00:01:09.600 --> 00:01:11.830 align:start position:0%
array
students<00:01:10.240><c> error</c><00:01:10.640><c> is</c><00:01:10.799><c> nothing</c><00:01:11.280><c> but</c><00:01:11.600><c> is</c><00:01:11.760><c> a</c>

00:01:11.830 --> 00:01:11.840 align:start position:0%
students error is nothing but is a
 

00:01:11.840 --> 00:01:13.429 align:start position:0%
students error is nothing but is a
collection<00:01:12.400><c> of</c><00:01:12.560><c> homogeneous</c>

00:01:13.429 --> 00:01:13.439 align:start position:0%
collection of homogeneous
 

00:01:13.439 --> 00:01:16.230 align:start position:0%
collection of homogeneous
elements<00:01:14.640><c> where</c><00:01:15.040><c> each</c><00:01:15.280><c> and</c><00:01:15.520><c> every</c><00:01:15.759><c> elements</c>

00:01:16.230 --> 00:01:16.240 align:start position:0%
elements where each and every elements
 

00:01:16.240 --> 00:01:18.870 align:start position:0%
elements where each and every elements
are<00:01:16.320><c> stored</c><00:01:16.799><c> in</c><00:01:16.960><c> a</c><00:01:17.040><c> sequential</c><00:01:17.759><c> memory</c>

00:01:18.870 --> 00:01:18.880 align:start position:0%
are stored in a sequential memory
 

00:01:18.880 --> 00:01:21.270 align:start position:0%
are stored in a sequential memory
okay<00:01:19.520><c> so</c><00:01:20.000><c> when</c><00:01:20.240><c> the</c><00:01:20.320><c> elements</c><00:01:20.799><c> are</c><00:01:20.880><c> stored</c><00:01:21.119><c> in</c>

00:01:21.270 --> 00:01:21.280 align:start position:0%
okay so when the elements are stored in
 

00:01:21.280 --> 00:01:22.630 align:start position:0%
okay so when the elements are stored in
a<00:01:21.360><c> sequential</c><00:01:22.080><c> manner</c>

00:01:22.630 --> 00:01:22.640 align:start position:0%
a sequential manner
 

00:01:22.640 --> 00:01:25.030 align:start position:0%
a sequential manner
and<00:01:22.880><c> in</c><00:01:23.040><c> the</c><00:01:23.119><c> continuous</c><00:01:23.759><c> form</c><00:01:24.080><c> in</c><00:01:24.240><c> the</c><00:01:24.320><c> memory</c>

00:01:25.030 --> 00:01:25.040 align:start position:0%
and in the continuous form in the memory
 

00:01:25.040 --> 00:01:25.670 align:start position:0%
and in the continuous form in the memory
then

00:01:25.670 --> 00:01:25.680 align:start position:0%
then
 

00:01:25.680 --> 00:01:29.510 align:start position:0%
then
that<00:01:26.159><c> is</c><00:01:26.320><c> known</c><00:01:26.640><c> as</c><00:01:26.880><c> an</c><00:01:27.280><c> m</c><00:01:28.080><c> so</c><00:01:28.640><c> here</c><00:01:29.040><c> i</c><00:01:29.119><c> am</c><00:01:29.280><c> just</c>

00:01:29.510 --> 00:01:29.520 align:start position:0%
that is known as an m so here i am just
 

00:01:29.520 --> 00:01:31.030 align:start position:0%
that is known as an m so here i am just
showing<00:01:29.759><c> you</c><00:01:29.920><c> one</c><00:01:30.159><c> example</c>

00:01:31.030 --> 00:01:31.040 align:start position:0%
showing you one example
 

00:01:31.040 --> 00:01:32.469 align:start position:0%
showing you one example
that<00:01:31.280><c> whatsapp</c><00:01:31.600><c> what</c><00:01:31.840><c> do</c><00:01:31.920><c> you</c><00:01:32.079><c> mean</c><00:01:32.240><c> by</c><00:01:32.400><c> the</c>

00:01:32.469 --> 00:01:32.479 align:start position:0%
that whatsapp what do you mean by the
 

00:01:32.479 --> 00:01:34.870 align:start position:0%
that whatsapp what do you mean by the
homogeneous<00:01:33.520><c> homogeneous</c><00:01:34.159><c> means</c><00:01:34.400><c> students</c>

00:01:34.870 --> 00:01:34.880 align:start position:0%
homogeneous homogeneous means students
 

00:01:34.880 --> 00:01:35.429 align:start position:0%
homogeneous homogeneous means students
the<00:01:34.960><c> same</c>

00:01:35.429 --> 00:01:35.439 align:start position:0%
the same
 

00:01:35.439 --> 00:01:38.310 align:start position:0%
the same
type<00:01:36.159><c> and</c><00:01:36.720><c> elements</c><00:01:37.280><c> here</c><00:01:37.600><c> stored</c><00:01:38.000><c> in</c><00:01:38.159><c> a</c>

00:01:38.310 --> 00:01:38.320 align:start position:0%
type and elements here stored in a
 

00:01:38.320 --> 00:01:39.109 align:start position:0%
type and elements here stored in a
continuous

00:01:39.109 --> 00:01:39.119 align:start position:0%
continuous
 

00:01:39.119 --> 00:01:43.590 align:start position:0%
continuous
fashion<00:01:40.479><c> here</c><00:01:41.119><c> in</c><00:01:41.439><c> array</c><00:01:42.000><c> index</c><00:01:42.479><c> starts</c><00:01:42.960><c> from</c>

00:01:43.590 --> 00:01:43.600 align:start position:0%
fashion here in array index starts from
 

00:01:43.600 --> 00:01:46.710 align:start position:0%
fashion here in array index starts from
0<00:01:44.240><c> make</c><00:01:44.479><c> sure</c><00:01:45.759><c> then</c>

00:01:46.710 --> 00:01:46.720 align:start position:0%
0 make sure then
 

00:01:46.720 --> 00:01:49.990 align:start position:0%
0 make sure then
let's<00:01:47.040><c> go</c><00:01:47.280><c> ahead</c><00:01:48.560><c> syntax</c><00:01:49.360><c> that's</c>

00:01:49.990 --> 00:01:50.000 align:start position:0%
let's go ahead syntax that's
 

00:01:50.000 --> 00:01:52.950 align:start position:0%
let's go ahead syntax that's
how<00:01:50.240><c> to</c><00:01:50.399><c> define</c><00:01:50.880><c> an</c><00:01:51.200><c> array</c><00:01:51.840><c> so</c><00:01:52.320><c> students</c><00:01:52.720><c> we</c>

00:01:52.950 --> 00:01:52.960 align:start position:0%
how to define an array so students we
 

00:01:52.960 --> 00:01:53.749 align:start position:0%
how to define an array so students we
can<00:01:53.119><c> define</c><00:01:53.520><c> an</c>

00:01:53.749 --> 00:01:53.759 align:start position:0%
can define an
 

00:01:53.759 --> 00:01:56.630 align:start position:0%
can define an
array<00:01:54.240><c> like</c><00:01:54.640><c> first</c><00:01:54.960><c> we</c><00:01:55.119><c> need</c><00:01:55.360><c> to</c><00:01:55.600><c> write</c><00:01:56.240><c> data</c>

00:01:56.630 --> 00:01:56.640 align:start position:0%
array like first we need to write data
 

00:01:56.640 --> 00:01:57.270 align:start position:0%
array like first we need to write data
type

00:01:57.270 --> 00:01:57.280 align:start position:0%
type
 

00:01:57.280 --> 00:02:00.550 align:start position:0%
type
then<00:01:58.159><c> array</c><00:01:58.560><c> name</c><00:01:59.119><c> then</c><00:01:59.840><c> science</c>

00:02:00.550 --> 00:02:00.560 align:start position:0%
then array name then science
 

00:02:00.560 --> 00:02:04.550 align:start position:0%
then array name then science
data<00:02:00.880><c> type</c><00:02:01.280><c> can</c><00:02:01.600><c> be</c><00:02:02.240><c> integer</c><00:02:02.880><c> float</c><00:02:03.520><c> character</c>

00:02:04.550 --> 00:02:04.560 align:start position:0%
data type can be integer float character
 

00:02:04.560 --> 00:02:07.350 align:start position:0%
data type can be integer float character
animal<00:02:05.360><c> and</c><00:02:05.600><c> a</c><00:02:05.759><c> name</c><00:02:06.159><c> should</c><00:02:06.479><c> be</c><00:02:06.719><c> meaningful</c>

00:02:07.350 --> 00:02:07.360 align:start position:0%
animal and a name should be meaningful
 

00:02:07.360 --> 00:02:07.990 align:start position:0%
animal and a name should be meaningful
make<00:02:07.600><c> sure</c>

00:02:07.990 --> 00:02:08.000 align:start position:0%
make sure
 

00:02:08.000 --> 00:02:10.630 align:start position:0%
make sure
if<00:02:08.160><c> you</c><00:02:08.720><c> want</c><00:02:08.959><c> to</c><00:02:09.119><c> make</c><00:02:09.360><c> an</c><00:02:09.520><c> array</c><00:02:09.840><c> of</c><00:02:10.000><c> students</c>

00:02:10.630 --> 00:02:10.640 align:start position:0%
if you want to make an array of students
 

00:02:10.640 --> 00:02:12.150 align:start position:0%
if you want to make an array of students
then<00:02:10.879><c> just</c><00:02:11.120><c> give</c><00:02:11.360><c> it</c><00:02:11.520><c> a</c><00:02:11.599><c> name</c><00:02:11.840><c> like</c>

00:02:12.150 --> 00:02:12.160 align:start position:0%
then just give it a name like
 

00:02:12.160 --> 00:02:15.510 align:start position:0%
then just give it a name like
std<00:02:13.040><c> student</c><00:02:13.760><c> or</c><00:02:14.080><c> students</c><00:02:14.959><c> fine</c>

00:02:15.510 --> 00:02:15.520 align:start position:0%
std student or students fine
 

00:02:15.520 --> 00:02:17.990 align:start position:0%
std student or students fine
and<00:02:16.080><c> in</c><00:02:16.400><c> square</c><00:02:16.720><c> brackets</c><00:02:17.280><c> we</c><00:02:17.440><c> are</c><00:02:17.599><c> writing</c>

00:02:17.990 --> 00:02:18.000 align:start position:0%
and in square brackets we are writing
 

00:02:18.000 --> 00:02:19.670 align:start position:0%
and in square brackets we are writing
the<00:02:18.160><c> size</c><00:02:18.560><c> of</c><00:02:18.800><c> the</c><00:02:19.040><c> array</c>

00:02:19.670 --> 00:02:19.680 align:start position:0%
the size of the array
 

00:02:19.680 --> 00:02:22.710 align:start position:0%
the size of the array
size<00:02:20.080><c> of</c><00:02:20.239><c> the</c><00:02:20.560><c> array</c><00:02:21.120><c> like</c><00:02:21.599><c> 5</c><00:02:22.239><c> 10</c>

00:02:22.710 --> 00:02:22.720 align:start position:0%
size of the array like 5 10
 

00:02:22.720 --> 00:02:25.750 align:start position:0%
size of the array like 5 10
anything<00:02:23.599><c> so</c><00:02:24.239><c> if</c><00:02:24.480><c> i</c><00:02:24.640><c> want</c><00:02:24.879><c> to</c><00:02:25.040><c> declare</c><00:02:25.520><c> an</c>

00:02:25.750 --> 00:02:25.760 align:start position:0%
anything so if i want to declare an
 

00:02:25.760 --> 00:02:29.030 align:start position:0%
anything so if i want to declare an
array<00:02:26.239><c> of</c><00:02:26.480><c> size</c><00:02:27.120><c> 10</c><00:02:27.680><c> of</c><00:02:28.000><c> integer</c><00:02:28.560><c> type</c>

00:02:29.030 --> 00:02:29.040 align:start position:0%
array of size 10 of integer type
 

00:02:29.040 --> 00:02:33.110 align:start position:0%
array of size 10 of integer type
then<00:02:29.599><c> it</c><00:02:29.920><c> can</c><00:02:30.160><c> be</c><00:02:30.400><c> like</c><00:02:31.120><c> example</c><00:02:32.000><c> integer</c>

00:02:33.110 --> 00:02:33.120 align:start position:0%
then it can be like example integer
 

00:02:33.120 --> 00:02:36.790 align:start position:0%
then it can be like example integer
a<00:02:33.280><c> double</c><00:02:33.680><c> r</c><00:02:34.160><c> of</c><00:02:34.879><c> 10.</c><00:02:35.920><c> fine</c>

00:02:36.790 --> 00:02:36.800 align:start position:0%
a double r of 10. fine
 

00:02:36.800 --> 00:02:40.229 align:start position:0%
a double r of 10. fine
now<00:02:37.440><c> let's</c><00:02:37.840><c> go</c><00:02:38.000><c> ahead</c><00:02:39.040><c> see</c><00:02:39.519><c> our</c><00:02:39.840><c> the</c><00:02:40.000><c> next</c>

00:02:40.229 --> 00:02:40.239 align:start position:0%
now let's go ahead see our the next
 

00:02:40.239 --> 00:02:40.710 align:start position:0%
now let's go ahead see our the next
topic

00:02:40.710 --> 00:02:40.720 align:start position:0%
topic
 

00:02:40.720 --> 00:02:44.309 align:start position:0%
topic
is<00:02:41.120><c> memory</c><00:02:41.519><c> representation</c><00:02:42.400><c> in</c><00:02:42.879><c> 1d</c>

00:02:44.309 --> 00:02:44.319 align:start position:0%
is memory representation in 1d
 

00:02:44.319 --> 00:02:47.830 align:start position:0%
is memory representation in 1d
so<00:02:44.879><c> students</c><00:02:45.680><c> here</c><00:02:46.000><c> you</c><00:02:46.080><c> can</c><00:02:46.239><c> see</c><00:02:46.480><c> that</c>

00:02:47.830 --> 00:02:47.840 align:start position:0%
so students here you can see that
 

00:02:47.840 --> 00:02:50.949 align:start position:0%
so students here you can see that
the<00:02:48.239><c> integer</c><00:02:49.360><c> array</c><00:02:49.920><c> of</c><00:02:50.319><c> 5</c>

00:02:50.949 --> 00:02:50.959 align:start position:0%
the integer array of 5
 

00:02:50.959 --> 00:02:53.750 align:start position:0%
the integer array of 5
students<00:02:51.440><c> if</c><00:02:51.680><c> i</c><00:02:51.680><c> am</c><00:02:51.840><c> taking</c><00:02:52.239><c> the</c><00:02:52.400><c> elements</c><00:02:53.200><c> of</c>

00:02:53.750 --> 00:02:53.760 align:start position:0%
students if i am taking the elements of
 

00:02:53.760 --> 00:02:54.470 align:start position:0%
students if i am taking the elements of
5

00:02:54.470 --> 00:02:54.480 align:start position:0%
5
 

00:02:54.480 --> 00:02:57.270 align:start position:0%
5
array<00:02:54.800><c> with</c><00:02:55.040><c> size</c><00:02:55.360><c> 5</c><00:02:55.840><c> then</c><00:02:56.239><c> it</c><00:02:56.560><c> is</c><00:02:56.800><c> like</c><00:02:57.120><c> a</c>

00:02:57.270 --> 00:02:57.280 align:start position:0%
array with size 5 then it is like a
 

00:02:57.280 --> 00:02:58.949 align:start position:0%
array with size 5 then it is like a
integer<00:02:57.840><c> a</c><00:02:58.080><c> of</c><00:02:58.319><c> 5</c>

00:02:58.949 --> 00:02:58.959 align:start position:0%
integer a of 5
 

00:02:58.959 --> 00:03:01.750 align:start position:0%
integer a of 5
so<00:02:59.519><c> integer</c><00:02:59.920><c> a</c><00:03:00.080><c> contains</c><00:03:00.640><c> 5</c><00:03:00.879><c> elements</c>

00:03:01.750 --> 00:03:01.760 align:start position:0%
so integer a contains 5 elements
 

00:03:01.760 --> 00:03:03.350 align:start position:0%
so integer a contains 5 elements
elements<00:03:02.319><c> are</c><00:03:02.400><c> like</c><00:03:02.720><c> this</c>

00:03:03.350 --> 00:03:03.360 align:start position:0%
elements are like this
 

00:03:03.360 --> 00:03:06.470 align:start position:0%
elements are like this
you<00:03:03.519><c> can</c><00:03:03.680><c> see</c><00:03:03.920><c> in</c><00:03:04.000><c> this</c><00:03:04.239><c> figure</c><00:03:04.959><c> like</c><00:03:05.360><c> 10</c><00:03:05.760><c> 20</c><00:03:06.159><c> 30</c>

00:03:06.470 --> 00:03:06.480 align:start position:0%
you can see in this figure like 10 20 30
 

00:03:06.480 --> 00:03:07.830 align:start position:0%
you can see in this figure like 10 20 30
40<00:03:06.879><c> and</c><00:03:07.040><c> 50</c>

00:03:07.830 --> 00:03:07.840 align:start position:0%
40 and 50
 

00:03:07.840 --> 00:03:10.710 align:start position:0%
40 and 50
so<00:03:08.080><c> as</c><00:03:08.480><c> you</c><00:03:08.720><c> know</c><00:03:09.360><c> the</c><00:03:09.680><c> array</c><00:03:10.080><c> stored</c><00:03:10.400><c> in</c><00:03:10.560><c> a</c>

00:03:10.710 --> 00:03:10.720 align:start position:0%
so as you know the array stored in a
 

00:03:10.720 --> 00:03:12.390 align:start position:0%
so as you know the array stored in a
continuous<00:03:11.360><c> memory</c>

00:03:12.390 --> 00:03:12.400 align:start position:0%
continuous memory
 

00:03:12.400 --> 00:03:15.750 align:start position:0%
continuous memory
allocations<00:03:13.599><c> so</c><00:03:14.239><c> if</c><00:03:14.640><c> my</c><00:03:14.959><c> first</c><00:03:15.280><c> element</c>

00:03:15.750 --> 00:03:15.760 align:start position:0%
allocations so if my first element
 

00:03:15.760 --> 00:03:18.790 align:start position:0%
allocations so if my first element
address<00:03:16.159><c> is</c><00:03:16.480><c> 1000</c><00:03:17.519><c> then</c><00:03:18.159><c> the</c><00:03:18.319><c> next</c>

00:03:18.790 --> 00:03:18.800 align:start position:0%
address is 1000 then the next
 

00:03:18.800 --> 00:03:22.390 align:start position:0%
address is 1000 then the next
can<00:03:19.040><c> be</c><00:03:19.200><c> implemented</c><00:03:20.159><c> as</c><00:03:20.480><c> per</c><00:03:20.640><c> the</c><00:03:20.879><c> size</c><00:03:21.519><c> is</c>

00:03:22.390 --> 00:03:22.400 align:start position:0%
can be implemented as per the size is
 

00:03:22.400 --> 00:03:25.030 align:start position:0%
can be implemented as per the size is
such<00:03:22.800><c> like</c><00:03:23.280><c> if</c><00:03:23.440><c> this</c><00:03:23.680><c> is</c><00:03:23.920><c> our</c><00:03:24.319><c> array</c><00:03:24.720><c> of</c>

00:03:25.030 --> 00:03:25.040 align:start position:0%
such like if this is our array of
 

00:03:25.040 --> 00:03:26.309 align:start position:0%
such like if this is our array of
integer<00:03:25.599><c> type</c>

00:03:26.309 --> 00:03:26.319 align:start position:0%
integer type
 

00:03:26.319 --> 00:03:29.509 align:start position:0%
integer type
so<00:03:26.879><c> the</c><00:03:27.120><c> next</c><00:03:27.440><c> element</c><00:03:28.000><c> size</c><00:03:28.319><c> can</c><00:03:28.560><c> be</c><00:03:29.040><c> two</c><00:03:29.280><c> byte</c>

00:03:29.509 --> 00:03:29.519 align:start position:0%
so the next element size can be two byte
 

00:03:29.519 --> 00:03:31.990 align:start position:0%
so the next element size can be two byte
incremented<00:03:30.319><c> like</c><00:03:30.560><c> one</c><00:03:30.720><c> double</c><00:03:30.959><c> 0</c><00:03:31.360><c> 2</c><00:03:31.599><c> 1</c>

00:03:31.990 --> 00:03:32.000 align:start position:0%
incremented like one double 0 2 1
 

00:03:32.000 --> 00:03:35.430 align:start position:0%
incremented like one double 0 2 1
0<00:03:32.319><c> 4</c><00:03:32.720><c> 6</c><00:03:33.200><c> 8</c><00:03:33.760><c> such</c><00:03:34.000><c> like</c><00:03:34.239><c> this</c><00:03:34.799><c> so</c>

00:03:35.430 --> 00:03:35.440 align:start position:0%
0 4 6 8 such like this so
 

00:03:35.440 --> 00:03:38.949 align:start position:0%
0 4 6 8 such like this so
the<00:03:35.680><c> first</c><00:03:36.159><c> element</c><00:03:36.959><c> of</c><00:03:37.360><c> array</c><00:03:38.080><c> is</c>

00:03:38.949 --> 00:03:38.959 align:start position:0%
the first element of array is
 

00:03:38.959 --> 00:03:42.710 align:start position:0%
the first element of array is
known<00:03:39.360><c> as</c><00:03:39.920><c> a</c><00:03:40.319><c> of</c><00:03:40.879><c> 0</c><00:03:41.440><c> here</c><00:03:41.760><c> our</c><00:03:42.000><c> variable</c><00:03:42.480><c> name</c>

00:03:42.710 --> 00:03:42.720 align:start position:0%
known as a of 0 here our variable name
 

00:03:42.720 --> 00:03:43.110 align:start position:0%
known as a of 0 here our variable name
is

00:03:43.110 --> 00:03:43.120 align:start position:0%
is
 

00:03:43.120 --> 00:03:46.309 align:start position:0%
is
a<00:03:43.760><c> and</c><00:03:44.000><c> the</c><00:03:44.159><c> element</c><00:03:44.480><c> situated</c><00:03:45.280><c> at</c><00:03:45.519><c> index</c>

00:03:46.309 --> 00:03:46.319 align:start position:0%
a and the element situated at index
 

00:03:46.319 --> 00:03:49.430 align:start position:0%
a and the element situated at index
0<00:03:47.120><c> that's</c><00:03:47.599><c> why</c><00:03:47.920><c> the</c><00:03:48.159><c> first</c><00:03:48.560><c> element</c><00:03:49.120><c> is</c>

00:03:49.430 --> 00:03:49.440 align:start position:0%
0 that's why the first element is
 

00:03:49.440 --> 00:03:53.429 align:start position:0%
0 that's why the first element is
a<00:03:49.920><c> of</c><00:03:50.480><c> 0</c><00:03:51.200><c> fine</c><00:03:51.760><c> so</c><00:03:52.239><c> in</c><00:03:52.480><c> green</c><00:03:52.720><c> color</c><00:03:53.040><c> you</c><00:03:53.200><c> can</c>

00:03:53.429 --> 00:03:53.439 align:start position:0%
a of 0 fine so in green color you can
 

00:03:53.439 --> 00:03:53.830 align:start position:0%
a of 0 fine so in green color you can
see

00:03:53.830 --> 00:03:53.840 align:start position:0%
see
 

00:03:53.840 --> 00:03:56.149 align:start position:0%
see
the<00:03:54.080><c> array</c><00:03:54.319><c> indices</c><00:03:55.200><c> in</c><00:03:55.280><c> the</c><00:03:55.519><c> brown</c><00:03:55.760><c> color</c><00:03:56.080><c> you</c>

00:03:56.149 --> 00:03:56.159 align:start position:0%
the array indices in the brown color you
 

00:03:56.159 --> 00:03:57.270 align:start position:0%
the array indices in the brown color you
can<00:03:56.400><c> see</c><00:03:56.640><c> like</c><00:03:56.879><c> the</c>

00:03:57.270 --> 00:03:57.280 align:start position:0%
can see like the
 

00:03:57.280 --> 00:04:00.710 align:start position:0%
can see like the
array<00:03:57.760><c> addresses</c><00:03:58.879><c> okay</c><00:03:59.519><c> fine</c><00:04:00.239><c> now</c>

00:04:00.710 --> 00:04:00.720 align:start position:0%
array addresses okay fine now
 

00:04:00.720 --> 00:04:03.830 align:start position:0%
array addresses okay fine now
the<00:04:00.879><c> next</c><00:04:01.599><c> students</c><00:04:02.159><c> a</c><00:04:02.480><c> of</c><00:04:02.799><c> 0</c>

00:04:03.830 --> 00:04:03.840 align:start position:0%
the next students a of 0
 

00:04:03.840 --> 00:04:06.949 align:start position:0%
the next students a of 0
a<00:04:04.159><c> of</c><00:04:04.400><c> 0</c><00:04:04.879><c> is</c><00:04:05.200><c> about</c><00:04:05.519><c> the</c><00:04:05.680><c> first</c><00:04:06.080><c> element</c>

00:04:06.949 --> 00:04:06.959 align:start position:0%
a of 0 is about the first element
 

00:04:06.959 --> 00:04:10.229 align:start position:0%
a of 0 is about the first element
which<00:04:07.280><c> is</c><00:04:07.519><c> also</c><00:04:07.920><c> known</c><00:04:08.239><c> as</c><00:04:08.560><c> the</c><00:04:08.799><c> base</c><00:04:09.280><c> element</c>

00:04:10.229 --> 00:04:10.239 align:start position:0%
which is also known as the base element
 

00:04:10.239 --> 00:04:13.509 align:start position:0%
which is also known as the base element
fine<00:04:10.640><c> because</c><00:04:11.200><c> ls</c><00:04:11.519><c> starts</c><00:04:11.920><c> from</c><00:04:12.319><c> a</c><00:04:12.480><c> of</c><00:04:12.799><c> 0</c>

00:04:13.509 --> 00:04:13.519 align:start position:0%
fine because ls starts from a of 0
 

00:04:13.519 --> 00:04:17.030 align:start position:0%
fine because ls starts from a of 0
now<00:04:14.000><c> the</c><00:04:14.319><c> element</c><00:04:14.799><c> stored</c><00:04:15.200><c> at</c><00:04:15.439><c> a</c><00:04:15.680><c> of</c><00:04:15.840><c> 0</c><00:04:16.160><c> is</c><00:04:16.479><c> 10</c>

00:04:17.030 --> 00:04:17.040 align:start position:0%
now the element stored at a of 0 is 10
 

00:04:17.040 --> 00:04:20.229 align:start position:0%
now the element stored at a of 0 is 10
and<00:04:17.280><c> address</c><00:04:17.680><c> of</c><00:04:17.919><c> a</c><00:04:18.079><c> of</c><00:04:18.239><c> 0</c><00:04:18.639><c> is</c><00:04:19.040><c> 1000</c>

00:04:20.229 --> 00:04:20.239 align:start position:0%
and address of a of 0 is 1000
 

00:04:20.239 --> 00:04:23.749 align:start position:0%
and address of a of 0 is 1000
next<00:04:20.560><c> element</c><00:04:21.040><c> addresses</c><00:04:21.680><c> 1</c><00:04:22.079><c> 0</c><00:04:22.720><c> 2</c><00:04:23.199><c> which</c><00:04:23.440><c> is</c>

00:04:23.749 --> 00:04:23.759 align:start position:0%
next element addresses 1 0 2 which is
 

00:04:23.759 --> 00:04:27.270 align:start position:0%
next element addresses 1 0 2 which is
age<00:04:24.160><c> of</c><00:04:24.479><c> 1</c><00:04:25.120><c> so</c><00:04:25.360><c> students</c><00:04:26.080><c> here</c><00:04:26.479><c> you</c><00:04:26.639><c> can</c><00:04:26.800><c> easily</c>

00:04:27.270 --> 00:04:27.280 align:start position:0%
age of 1 so students here you can easily
 

00:04:27.280 --> 00:04:27.990 align:start position:0%
age of 1 so students here you can easily
say<00:04:27.520><c> that</c>

00:04:27.990 --> 00:04:28.000 align:start position:0%
say that
 

00:04:28.000 --> 00:04:31.350 align:start position:0%
say that
if<00:04:28.320><c> my</c><00:04:28.560><c> the</c><00:04:28.720><c> array</c><00:04:29.120><c> is</c><00:04:29.360><c> of</c><00:04:29.680><c> integer</c><00:04:30.160><c> type</c><00:04:30.800><c> then</c>

00:04:31.350 --> 00:04:31.360 align:start position:0%
if my the array is of integer type then
 

00:04:31.360 --> 00:04:33.909 align:start position:0%
if my the array is of integer type then
the<00:04:31.759><c> elements</c><00:04:32.400><c> can</c><00:04:32.639><c> be</c><00:04:32.800><c> implemented</c><00:04:33.759><c> the</c>

00:04:33.909 --> 00:04:33.919 align:start position:0%
the elements can be implemented the
 

00:04:33.919 --> 00:04:36.390 align:start position:0%
the elements can be implemented the
address<00:04:34.320><c> can</c><00:04:34.479><c> be</c><00:04:34.639><c> implemented</c><00:04:35.360><c> in</c><00:04:35.520><c> two</c><00:04:35.759><c> bytes</c>

00:04:36.390 --> 00:04:36.400 align:start position:0%
address can be implemented in two bytes
 

00:04:36.400 --> 00:04:38.550 align:start position:0%
address can be implemented in two bytes
but<00:04:36.880><c> what</c><00:04:37.120><c> happens</c><00:04:37.680><c> if</c><00:04:37.840><c> i</c><00:04:38.000><c> have</c><00:04:38.080><c> the</c><00:04:38.160><c> floating</c>

00:04:38.550 --> 00:04:38.560 align:start position:0%
but what happens if i have the floating
 

00:04:38.560 --> 00:04:39.909 align:start position:0%
but what happens if i have the floating
type<00:04:38.800><c> of</c><00:04:38.960><c> panel</c>

00:04:39.909 --> 00:04:39.919 align:start position:0%
type of panel
 

00:04:39.919 --> 00:04:42.230 align:start position:0%
type of panel
students<00:04:40.639><c> if</c><00:04:40.880><c> you</c><00:04:40.960><c> have</c><00:04:41.120><c> a</c><00:04:41.280><c> floating</c><00:04:41.680><c> type</c><00:04:42.080><c> of</c>

00:04:42.230 --> 00:04:42.240 align:start position:0%
students if you have a floating type of
 

00:04:42.240 --> 00:04:42.950 align:start position:0%
students if you have a floating type of
array

00:04:42.950 --> 00:04:42.960 align:start position:0%
array
 

00:04:42.960 --> 00:04:46.070 align:start position:0%
array
then<00:04:43.680><c> your</c><00:04:44.400><c> addresses</c><00:04:44.960><c> can</c><00:04:45.120><c> be</c><00:04:45.280><c> incremented</c>

00:04:46.070 --> 00:04:46.080 align:start position:0%
then your addresses can be incremented
 

00:04:46.080 --> 00:04:49.110 align:start position:0%
then your addresses can be incremented
four<00:04:46.400><c> bytes</c><00:04:47.040><c> like</c><00:04:47.440><c> a</c><00:04:47.680><c> of</c><00:04:47.840><c> zero</c><00:04:48.160><c> is</c><00:04:48.320><c> at</c><00:04:48.720><c> one</c>

00:04:49.110 --> 00:04:49.120 align:start position:0%
four bytes like a of zero is at one
 

00:04:49.120 --> 00:04:49.749 align:start position:0%
four bytes like a of zero is at one
thousand

00:04:49.749 --> 00:04:49.759 align:start position:0%
thousand
 

00:04:49.759 --> 00:04:51.990 align:start position:0%
thousand
then<00:04:50.080><c> a</c><00:04:50.240><c> of</c><00:04:50.400><c> one</c><00:04:50.720><c> can</c><00:04:50.960><c> be</c><00:04:51.120><c> at</c><00:04:51.280><c> one</c><00:04:51.440><c> double</c><00:04:51.680><c> zero</c>

00:04:51.990 --> 00:04:52.000 align:start position:0%
then a of one can be at one double zero
 

00:04:52.000 --> 00:04:53.749 align:start position:0%
then a of one can be at one double zero
four<00:04:52.479><c> one</c><00:04:52.639><c> double</c><00:04:52.960><c> zero</c><00:04:53.280><c> eight</c>

00:04:53.749 --> 00:04:53.759 align:start position:0%
four one double zero eight
 

00:04:53.759 --> 00:04:57.189 align:start position:0%
four one double zero eight
one<00:04:54.160><c> is</c><00:04:54.639><c> one</c><00:04:54.880><c> zero</c><00:04:55.199><c> one</c><00:04:55.440><c> two</c><00:04:56.080><c> okay</c><00:04:56.720><c> now</c>

00:04:57.189 --> 00:04:57.199 align:start position:0%
one is one zero one two okay now
 

00:04:57.199 --> 00:04:59.990 align:start position:0%
one is one zero one two okay now
what<00:04:57.440><c> about</c><00:04:57.840><c> the</c><00:04:58.000><c> base</c><00:04:58.479><c> address</c><00:04:59.440><c> whatever</c><00:04:59.840><c> the</c>

00:04:59.990 --> 00:05:00.000 align:start position:0%
what about the base address whatever the
 

00:05:00.000 --> 00:05:02.550 align:start position:0%
what about the base address whatever the
address<00:05:00.560><c> of</c><00:05:00.720><c> the</c><00:05:00.880><c> first</c><00:05:01.199><c> element</c><00:05:01.759><c> is</c><00:05:01.919><c> known</c><00:05:02.240><c> as</c>

00:05:02.550 --> 00:05:02.560 align:start position:0%
address of the first element is known as
 

00:05:02.560 --> 00:05:05.270 align:start position:0%
address of the first element is known as
base<00:05:02.960><c> address</c><00:05:03.680><c> make</c><00:05:03.919><c> it</c><00:05:04.000><c> clear</c><00:05:04.639><c> the</c><00:05:04.880><c> an</c>

00:05:05.270 --> 00:05:05.280 align:start position:0%
base address make it clear the an
 

00:05:05.280 --> 00:05:07.350 align:start position:0%
base address make it clear the an
address<00:05:05.840><c> of</c><00:05:05.919><c> the</c><00:05:06.160><c> first</c><00:05:06.560><c> element</c><00:05:07.039><c> of</c><00:05:07.120><c> the</c>

00:05:07.350 --> 00:05:07.360 align:start position:0%
address of the first element of the
 

00:05:07.360 --> 00:05:08.790 align:start position:0%
address of the first element of the
array<00:05:07.759><c> is</c><00:05:07.919><c> known</c><00:05:08.240><c> as</c>

00:05:08.790 --> 00:05:08.800 align:start position:0%
array is known as
 

00:05:08.800 --> 00:05:11.670 align:start position:0%
array is known as
base<00:05:09.120><c> address</c><00:05:09.680><c> here</c><00:05:10.320><c> the</c><00:05:10.479><c> base</c><00:05:10.800><c> address</c><00:05:11.199><c> is</c>

00:05:11.670 --> 00:05:11.680 align:start position:0%
base address here the base address is
 

00:05:11.680 --> 00:05:12.469 align:start position:0%
base address here the base address is
thousand

00:05:12.469 --> 00:05:12.479 align:start position:0%
thousand
 

00:05:12.479 --> 00:05:15.749 align:start position:0%
thousand
now<00:05:12.880><c> the</c><00:05:13.039><c> base</c><00:05:13.440><c> address</c><00:05:15.039><c> address</c><00:05:15.440><c> of</c><00:05:15.600><c> the</c>

00:05:15.749 --> 00:05:15.759 align:start position:0%
now the base address address of the
 

00:05:15.759 --> 00:05:16.710 align:start position:0%
now the base address address of the
first

00:05:16.710 --> 00:05:16.720 align:start position:0%
first
 

00:05:16.720 --> 00:05:19.350 align:start position:0%
first
a<00:05:16.960><c> of</c><00:05:17.120><c> zero</c><00:05:17.360><c> address</c><00:05:17.680><c> is</c><00:05:17.919><c> thousand</c><00:05:18.800><c> now</c><00:05:19.199><c> how</c>

00:05:19.350 --> 00:05:19.360 align:start position:0%
a of zero address is thousand now how
 

00:05:19.360 --> 00:05:21.510 align:start position:0%
a of zero address is thousand now how
many<00:05:19.759><c> memory</c><00:05:20.080><c> occupied</c><00:05:20.639><c> by</c><00:05:20.800><c> this</c>

00:05:21.510 --> 00:05:21.520 align:start position:0%
many memory occupied by this
 

00:05:21.520 --> 00:05:24.150 align:start position:0%
many memory occupied by this
students<00:05:22.000><c> the</c><00:05:22.160><c> total</c><00:05:22.560><c> memory</c><00:05:22.960><c> occupied</c><00:05:23.919><c> by</c>

00:05:24.150 --> 00:05:24.160 align:start position:0%
students the total memory occupied by
 

00:05:24.160 --> 00:05:24.870 align:start position:0%
students the total memory occupied by
this<00:05:24.400><c> whole</c>

00:05:24.870 --> 00:05:24.880 align:start position:0%
this whole
 

00:05:24.880 --> 00:05:27.909 align:start position:0%
this whole
a<00:05:25.360><c> array</c><00:05:26.240><c> is</c><00:05:27.039><c> 10</c><00:05:27.280><c> minutes</c>

00:05:27.909 --> 00:05:27.919 align:start position:0%
a array is 10 minutes
 

00:05:27.919 --> 00:05:29.909 align:start position:0%
a array is 10 minutes
why<00:05:28.400><c> because</c><00:05:28.800><c> there</c><00:05:29.039><c> are</c><00:05:29.120><c> five</c><00:05:29.360><c> elements</c><00:05:29.759><c> are</c>

00:05:29.909 --> 00:05:29.919 align:start position:0%
why because there are five elements are
 

00:05:29.919 --> 00:05:31.590 align:start position:0%
why because there are five elements are
there<00:05:30.479><c> each</c><00:05:30.720><c> and</c><00:05:30.880><c> every</c><00:05:31.120><c> element</c>

00:05:31.590 --> 00:05:31.600 align:start position:0%
there each and every element
 

00:05:31.600 --> 00:05:34.310 align:start position:0%
there each and every element
of<00:05:31.840><c> type</c><00:05:32.240><c> integer</c><00:05:32.960><c> and</c><00:05:33.120><c> integer</c><00:05:33.520><c> contains</c><00:05:34.080><c> two</c>

00:05:34.310 --> 00:05:34.320 align:start position:0%
of type integer and integer contains two
 

00:05:34.320 --> 00:05:34.790 align:start position:0%
of type integer and integer contains two
bytes

00:05:34.790 --> 00:05:34.800 align:start position:0%
bytes
 

00:05:34.800 --> 00:05:38.469 align:start position:0%
bytes
so<00:05:35.199><c> that</c><00:05:35.600><c> becomes</c><00:05:36.560><c> 10</c><00:05:36.800><c> max</c><00:05:37.680><c> so</c>

00:05:38.469 --> 00:05:38.479 align:start position:0%
so that becomes 10 max so
 

00:05:38.479 --> 00:05:40.950 align:start position:0%
so that becomes 10 max so
if<00:05:38.720><c> the</c><00:05:38.960><c> array</c><00:05:39.360><c> is</c><00:05:39.520><c> of</c><00:05:39.759><c> protein</c><00:05:40.240><c> type</c><00:05:40.639><c> then</c><00:05:40.800><c> the</c>

00:05:40.950 --> 00:05:40.960 align:start position:0%
if the array is of protein type then the
 

00:05:40.960 --> 00:05:41.670 align:start position:0%
if the array is of protein type then the
memory

00:05:41.670 --> 00:05:41.680 align:start position:0%
memory
 

00:05:41.680 --> 00:05:45.590 align:start position:0%
memory
can<00:05:42.000><c> be</c><00:05:42.960><c> 5</c><00:05:43.360><c> into</c><00:05:43.759><c> 4</c><00:05:44.240><c> which</c><00:05:44.479><c> is</c><00:05:44.639><c> equal</c><00:05:44.960><c> to</c><00:05:45.120><c> 20</c>

00:05:45.590 --> 00:05:45.600 align:start position:0%
can be 5 into 4 which is equal to 20
 

00:05:45.600 --> 00:05:46.390 align:start position:0%
can be 5 into 4 which is equal to 20
bytes

00:05:46.390 --> 00:05:46.400 align:start position:0%
bytes
 

00:05:46.400 --> 00:05:49.430 align:start position:0%
bytes
fine<00:05:47.039><c> so</c><00:05:47.280><c> now</c><00:05:47.919><c> let's</c><00:05:48.240><c> start</c><00:05:48.720><c> with</c><00:05:48.880><c> the</c><00:05:49.039><c> memory</c>

00:05:49.430 --> 00:05:49.440 align:start position:0%
fine so now let's start with the memory
 

00:05:49.440 --> 00:05:50.390 align:start position:0%
fine so now let's start with the memory
calculation

00:05:50.390 --> 00:05:50.400 align:start position:0%
calculation
 

00:05:50.400 --> 00:05:54.070 align:start position:0%
calculation
or<00:05:51.039><c> example</c><00:05:51.759><c> of</c><00:05:52.320><c> only</c><00:05:53.360><c> f</c>

00:05:54.070 --> 00:05:54.080 align:start position:0%
or example of only f
 

00:05:54.080 --> 00:05:56.230 align:start position:0%
or example of only f
students<00:05:54.800><c> here</c><00:05:55.039><c> you</c><00:05:55.120><c> can</c><00:05:55.280><c> see</c><00:05:55.520><c> the</c><00:05:55.680><c> calculate</c>

00:05:56.230 --> 00:05:56.240 align:start position:0%
students here you can see the calculate
 

00:05:56.240 --> 00:05:58.070 align:start position:0%
students here you can see the calculate
the<00:05:56.400><c> question</c><00:05:56.960><c> is</c><00:05:57.120><c> like</c><00:05:57.280><c> this</c>

00:05:58.070 --> 00:05:58.080 align:start position:0%
the question is like this
 

00:05:58.080 --> 00:06:01.590 align:start position:0%
the question is like this
to<00:05:58.240><c> calculate</c><00:05:59.199><c> the</c><00:05:59.440><c> address</c><00:06:00.160><c> of</c><00:06:00.880><c> element</c>

00:06:01.590 --> 00:06:01.600 align:start position:0%
to calculate the address of element
 

00:06:01.600 --> 00:06:04.550 align:start position:0%
to calculate the address of element
in<00:06:01.840><c> single</c><00:06:02.319><c> dimensional</c><00:06:03.280><c> error</c><00:06:03.919><c> fine</c>

00:06:04.550 --> 00:06:04.560 align:start position:0%
in single dimensional error fine
 

00:06:04.560 --> 00:06:06.710 align:start position:0%
in single dimensional error fine
students<00:06:05.039><c> formula</c><00:06:05.600><c> for</c><00:06:05.840><c> that</c><00:06:06.160><c> to</c><00:06:06.240><c> calculate</c>

00:06:06.710 --> 00:06:06.720 align:start position:0%
students formula for that to calculate
 

00:06:06.720 --> 00:06:07.990 align:start position:0%
students formula for that to calculate
the<00:06:06.880><c> address</c><00:06:07.280><c> of</c>

00:06:07.990 --> 00:06:08.000 align:start position:0%
the address of
 

00:06:08.000 --> 00:06:10.710 align:start position:0%
the address of
element<00:06:08.479><c> in</c><00:06:08.639><c> single</c><00:06:08.880><c> dimensional</c><00:06:09.600><c> array</c><00:06:10.080><c> is</c>

00:06:10.710 --> 00:06:10.720 align:start position:0%
element in single dimensional array is
 

00:06:10.720 --> 00:06:12.469 align:start position:0%
element in single dimensional array is
air<00:06:11.120><c> phi</c><00:06:11.360><c> is</c><00:06:11.520><c> equal</c><00:06:11.919><c> to</c>

00:06:12.469 --> 00:06:12.479 align:start position:0%
air phi is equal to
 

00:06:12.479 --> 00:06:15.590 align:start position:0%
air phi is equal to
base<00:06:12.960><c> address</c><00:06:13.440><c> b</c><00:06:13.759><c> a</c><00:06:14.479><c> briefly</c><00:06:14.880><c> see</c>

00:06:15.590 --> 00:06:15.600 align:start position:0%
base address b a briefly see
 

00:06:15.600 --> 00:06:18.710 align:start position:0%
base address b a briefly see
a<00:06:15.840><c> of</c><00:06:16.000><c> phi</c><00:06:16.400><c> is</c><00:06:16.560><c> equal</c><00:06:16.880><c> to</c><00:06:17.520><c> base</c><00:06:18.000><c> address</c><00:06:18.479><c> b</c>

00:06:18.710 --> 00:06:18.720 align:start position:0%
a of phi is equal to base address b
 

00:06:18.720 --> 00:06:22.070 align:start position:0%
a of phi is equal to base address b
s<00:06:18.880><c> stands</c><00:06:19.120><c> for</c><00:06:19.280><c> this</c><00:06:19.600><c> address</c><00:06:20.160><c> plus</c><00:06:20.880><c> i</c><00:06:21.520><c> minus</c>

00:06:22.070 --> 00:06:22.080 align:start position:0%
s stands for this address plus i minus
 

00:06:22.080 --> 00:06:24.469 align:start position:0%
s stands for this address plus i minus
l<00:06:22.400><c> star</c><00:06:23.039><c> size</c><00:06:23.680><c> star</c><00:06:24.000><c> that</c><00:06:24.240><c> means</c>

00:06:24.469 --> 00:06:24.479 align:start position:0%
l star size star that means
 

00:06:24.479 --> 00:06:26.309 align:start position:0%
l star size star that means
multiplication<00:06:25.199><c> do</c><00:06:25.360><c> not</c><00:06:25.520><c> forget</c><00:06:25.840><c> that</c>

00:06:26.309 --> 00:06:26.319 align:start position:0%
multiplication do not forget that
 

00:06:26.319 --> 00:06:29.909 align:start position:0%
multiplication do not forget that
so<00:06:27.120><c> i</c><00:06:27.680><c> that</c><00:06:27.919><c> means</c><00:06:28.240><c> index</c><00:06:29.280><c> which</c>

00:06:29.909 --> 00:06:29.919 align:start position:0%
so i that means index which
 

00:06:29.919 --> 00:06:31.830 align:start position:0%
so i that means index which
on<00:06:30.160><c> which</c><00:06:30.400><c> the</c><00:06:30.560><c> address</c><00:06:30.880><c> we</c><00:06:31.039><c> want</c><00:06:31.280><c> to</c><00:06:31.440><c> find</c><00:06:31.680><c> it</c>

00:06:31.830 --> 00:06:31.840 align:start position:0%
on which the address we want to find it
 

00:06:31.840 --> 00:06:33.110 align:start position:0%
on which the address we want to find it
out<00:06:32.400><c> then</c>

00:06:33.110 --> 00:06:33.120 align:start position:0%
out then
 

00:06:33.120 --> 00:06:36.150 align:start position:0%
out then
l<00:06:33.840><c> l</c><00:06:34.080><c> means</c><00:06:34.479><c> lower</c><00:06:34.880><c> bound</c><00:06:35.360><c> okay</c><00:06:35.680><c> so</c><00:06:35.840><c> what</c><00:06:36.000><c> do</c>

00:06:36.150 --> 00:06:36.160 align:start position:0%
l l means lower bound okay so what do
 

00:06:36.160 --> 00:06:37.350 align:start position:0%
l l means lower bound okay so what do
you<00:06:36.240><c> mean</c><00:06:36.400><c> by</c><00:06:36.560><c> the</c><00:06:36.639><c> lower</c><00:06:36.960><c> one</c>

00:06:37.350 --> 00:06:37.360 align:start position:0%
you mean by the lower one
 

00:06:37.360 --> 00:06:39.909 align:start position:0%
you mean by the lower one
students<00:06:37.919><c> if</c><00:06:38.160><c> we</c><00:06:38.319><c> have</c><00:06:38.479><c> an</c><00:06:38.720><c> array</c><00:06:39.280><c> of</c><00:06:39.520><c> size</c>

00:06:39.909 --> 00:06:39.919 align:start position:0%
students if we have an array of size
 

00:06:39.919 --> 00:06:40.469 align:start position:0%
students if we have an array of size
five

00:06:40.469 --> 00:06:40.479 align:start position:0%
five
 

00:06:40.479 --> 00:06:43.350 align:start position:0%
five
then<00:06:40.720><c> index</c><00:06:41.199><c> starts</c><00:06:41.600><c> from</c><00:06:41.919><c> zero</c><00:06:42.560><c> that's</c><00:06:42.880><c> why</c>

00:06:43.350 --> 00:06:43.360 align:start position:0%
then index starts from zero that's why
 

00:06:43.360 --> 00:06:45.029 align:start position:0%
then index starts from zero that's why
the<00:06:43.520><c> elements</c><00:06:44.000><c> goes</c><00:06:44.240><c> like</c><00:06:44.479><c> this</c>

00:06:45.029 --> 00:06:45.039 align:start position:0%
the elements goes like this
 

00:06:45.039 --> 00:06:48.230 align:start position:0%
the elements goes like this
a<00:06:45.280><c> of</c><00:06:45.520><c> zero</c><00:06:46.000><c> one</c><00:06:46.479><c> two</c><00:06:46.960><c> three</c><00:06:47.280><c> and</c><00:06:47.520><c> four</c>

00:06:48.230 --> 00:06:48.240 align:start position:0%
a of zero one two three and four
 

00:06:48.240 --> 00:06:51.270 align:start position:0%
a of zero one two three and four
so<00:06:48.720><c> the</c><00:06:48.960><c> zero</c><00:06:49.280><c> is</c><00:06:49.440><c> known</c><00:06:49.759><c> as</c><00:06:50.319><c> zero</c><00:06:50.639><c> is</c><00:06:50.800><c> known</c><00:06:51.039><c> as</c>

00:06:51.270 --> 00:06:51.280 align:start position:0%
so the zero is known as zero is known as
 

00:06:51.280 --> 00:06:52.790 align:start position:0%
so the zero is known as zero is known as
lower<00:06:51.599><c> bound</c><00:06:51.919><c> of</c><00:06:52.000><c> the</c><00:06:52.240><c> array</c>

00:06:52.790 --> 00:06:52.800 align:start position:0%
lower bound of the array
 

00:06:52.800 --> 00:06:55.510 align:start position:0%
lower bound of the array
and<00:06:53.280><c> four</c><00:06:53.599><c> is</c><00:06:53.759><c> known</c><00:06:54.000><c> as</c><00:06:54.479><c> upper</c><00:06:54.880><c> bound</c><00:06:55.199><c> of</c><00:06:55.360><c> the</c>

00:06:55.510 --> 00:06:55.520 align:start position:0%
and four is known as upper bound of the
 

00:06:55.520 --> 00:06:56.710 align:start position:0%
and four is known as upper bound of the
array

00:06:56.710 --> 00:06:56.720 align:start position:0%
array
 

00:06:56.720 --> 00:07:00.309 align:start position:0%
array
fine<00:06:57.199><c> so</c><00:06:57.440><c> now</c><00:06:58.319><c> just</c><00:06:58.880><c> the</c><00:06:59.120><c> i</c><00:06:59.360><c> is</c><00:06:59.680><c> index</c>

00:07:00.309 --> 00:07:00.319 align:start position:0%
fine so now just the i is index
 

00:07:00.319 --> 00:07:02.710 align:start position:0%
fine so now just the i is index
b<00:07:00.479><c> a</c><00:07:00.639><c> that</c><00:07:00.880><c> means</c><00:07:01.120><c> less</c><00:07:01.360><c> address</c><00:07:01.919><c> l</c><00:07:02.160><c> that</c><00:07:02.400><c> means</c>

00:07:02.710 --> 00:07:02.720 align:start position:0%
b a that means less address l that means
 

00:07:02.720 --> 00:07:03.589 align:start position:0%
b a that means less address l that means
lower<00:07:03.039><c> amount</c>

00:07:03.589 --> 00:07:03.599 align:start position:0%
lower amount
 

00:07:03.599 --> 00:07:05.510 align:start position:0%
lower amount
and<00:07:03.840><c> the</c><00:07:04.000><c> total</c><00:07:04.319><c> number</c><00:07:04.479><c> of</c><00:07:04.639><c> elements</c><00:07:05.199><c> are</c><00:07:05.360><c> in</c>

00:07:05.510 --> 00:07:05.520 align:start position:0%
and the total number of elements are in
 

00:07:05.520 --> 00:07:07.110 align:start position:0%
and the total number of elements are in
the<00:07:05.680><c> array</c><00:07:06.479><c> is</c>

00:07:07.110 --> 00:07:07.120 align:start position:0%
the array is
 

00:07:07.120 --> 00:07:10.390 align:start position:0%
the array is
u<00:07:07.440><c> minus</c><00:07:07.919><c> l</c><00:07:08.240><c> plus</c><00:07:08.639><c> 1</c><00:07:09.039><c> just</c><00:07:09.280><c> make</c><00:07:09.520><c> sure</c>

00:07:10.390 --> 00:07:10.400 align:start position:0%
u minus l plus 1 just make sure
 

00:07:10.400 --> 00:07:13.430 align:start position:0%
u minus l plus 1 just make sure
what<00:07:10.880><c> c</c><00:07:11.199><c> please</c><00:07:11.520><c> focus</c><00:07:11.840><c> on</c><00:07:12.000><c> this</c><00:07:12.639><c> formula</c>

00:07:13.430 --> 00:07:13.440 align:start position:0%
what c please focus on this formula
 

00:07:13.440 --> 00:07:17.350 align:start position:0%
what c please focus on this formula
that<00:07:14.080><c> u</c><00:07:14.479><c> minus</c><00:07:15.120><c> l</c><00:07:15.440><c> plus</c><00:07:16.000><c> 1</c><00:07:16.400><c> q</c><00:07:16.720><c> means</c><00:07:17.039><c> upper</c>

00:07:17.350 --> 00:07:17.360 align:start position:0%
that u minus l plus 1 q means upper
 

00:07:17.360 --> 00:07:17.749 align:start position:0%
that u minus l plus 1 q means upper
bound

00:07:17.749 --> 00:07:17.759 align:start position:0%
bound
 

00:07:17.759 --> 00:07:20.390 align:start position:0%
bound
l<00:07:17.919><c> means</c><00:07:18.240><c> lower</c><00:07:18.560><c> bound</c><00:07:19.039><c> plus</c><00:07:19.680><c> 1</c><00:07:19.919><c> that</c><00:07:20.160><c> is</c><00:07:20.240><c> the</c>

00:07:20.390 --> 00:07:20.400 align:start position:0%
l means lower bound plus 1 that is the
 

00:07:20.400 --> 00:07:22.390 align:start position:0%
l means lower bound plus 1 that is the
total<00:07:20.960><c> size</c><00:07:21.280><c> of</c><00:07:21.360><c> the</c><00:07:21.440><c> elements</c><00:07:22.080><c> in</c>

00:07:22.390 --> 00:07:22.400 align:start position:0%
total size of the elements in
 

00:07:22.400 --> 00:07:24.870 align:start position:0%
total size of the elements in
error<00:07:23.280><c> fine</c><00:07:23.919><c> so</c><00:07:24.080><c> let's</c><00:07:24.319><c> start</c><00:07:24.560><c> with</c><00:07:24.720><c> the</c>

00:07:24.870 --> 00:07:24.880 align:start position:0%
error fine so let's start with the
 

00:07:24.880 --> 00:07:25.589 align:start position:0%
error fine so let's start with the
example

00:07:25.589 --> 00:07:25.599 align:start position:0%
example
 

00:07:25.599 --> 00:07:28.070 align:start position:0%
example
the<00:07:25.840><c> question</c><00:07:26.240><c> is</c><00:07:26.639><c> calculate</c><00:07:27.120><c> the</c><00:07:27.360><c> address</c><00:07:27.759><c> of</c>

00:07:28.070 --> 00:07:28.080 align:start position:0%
the question is calculate the address of
 

00:07:28.080 --> 00:07:29.189 align:start position:0%
the question is calculate the address of
a<00:07:28.240><c> of</c><00:07:28.479><c> 6</c>

00:07:29.189 --> 00:07:29.199 align:start position:0%
a of 6
 

00:07:29.199 --> 00:07:32.390 align:start position:0%
a of 6
calculate<00:07:29.759><c> the</c><00:07:29.919><c> address</c><00:07:30.319><c> of</c><00:07:30.639><c> a</c><00:07:30.880><c> of</c><00:07:31.199><c> 6</c><00:07:32.000><c> if</c>

00:07:32.390 --> 00:07:32.400 align:start position:0%
calculate the address of a of 6 if
 

00:07:32.400 --> 00:07:35.430 align:start position:0%
calculate the address of a of 6 if
the<00:07:32.639><c> given</c><00:07:33.120><c> array</c><00:07:33.599><c> is</c><00:07:34.000><c> a</c><00:07:34.240><c> of</c><00:07:34.479><c> 9</c><00:07:34.960><c> so</c>

00:07:35.430 --> 00:07:35.440 align:start position:0%
the given array is a of 9 so
 

00:07:35.440 --> 00:07:37.830 align:start position:0%
the given array is a of 9 so
here<00:07:36.000><c> we</c><00:07:36.319><c> have</c><00:07:36.880><c> the</c><00:07:37.039><c> total</c><00:07:37.360><c> size</c><00:07:37.680><c> of</c><00:07:37.759><c> the</c>

00:07:37.830 --> 00:07:37.840 align:start position:0%
here we have the total size of the
 

00:07:37.840 --> 00:07:38.469 align:start position:0%
here we have the total size of the
elements

00:07:38.469 --> 00:07:38.479 align:start position:0%
elements
 

00:07:38.479 --> 00:07:42.230 align:start position:0%
elements
a<00:07:38.720><c> of</c><00:07:39.039><c> 9</c><00:07:39.440><c> arrays</c><00:07:40.160><c> a</c><00:07:40.400><c> of</c><00:07:40.560><c> 9</c><00:07:40.800><c> so</c><00:07:41.039><c> total</c><00:07:41.440><c> 9</c><00:07:41.680><c> elements</c>

00:07:42.230 --> 00:07:42.240 align:start position:0%
a of 9 arrays a of 9 so total 9 elements
 

00:07:42.240 --> 00:07:42.950 align:start position:0%
a of 9 arrays a of 9 so total 9 elements
are<00:07:42.400><c> there</c>

00:07:42.950 --> 00:07:42.960 align:start position:0%
are there
 

00:07:42.960 --> 00:07:45.510 align:start position:0%
are there
fine<00:07:43.680><c> what</c><00:07:43.919><c> we</c><00:07:44.080><c> need</c><00:07:44.240><c> to</c><00:07:44.319><c> find</c><00:07:44.560><c> it</c><00:07:44.720><c> out</c><00:07:45.120><c> we</c><00:07:45.280><c> need</c>

00:07:45.510 --> 00:07:45.520 align:start position:0%
fine what we need to find it out we need
 

00:07:45.520 --> 00:07:45.990 align:start position:0%
fine what we need to find it out we need
to<00:07:45.599><c> find</c>

00:07:45.990 --> 00:07:46.000 align:start position:0%
to find
 

00:07:46.000 --> 00:07:49.110 align:start position:0%
to find
out<00:07:46.240><c> the</c><00:07:46.400><c> address</c><00:07:46.960><c> of</c><00:07:47.360><c> a</c><00:07:47.599><c> of</c><00:07:48.080><c> 6</c><00:07:48.639><c> so</c>

00:07:49.110 --> 00:07:49.120 align:start position:0%
out the address of a of 6 so
 

00:07:49.120 --> 00:07:52.070 align:start position:0%
out the address of a of 6 so
our<00:07:49.440><c> i</c><00:07:49.680><c> becomes</c><00:07:50.319><c> 6</c><00:07:50.960><c> students</c><00:07:51.360><c> base</c><00:07:51.599><c> address</c><00:07:51.919><c> is</c>

00:07:52.070 --> 00:07:52.080 align:start position:0%
our i becomes 6 students base address is
 

00:07:52.080 --> 00:07:52.790 align:start position:0%
our i becomes 6 students base address is
also<00:07:52.319><c> given</c>

00:07:52.790 --> 00:07:52.800 align:start position:0%
also given
 

00:07:52.800 --> 00:07:56.710 align:start position:0%
also given
base<00:07:53.120><c> address</c><00:07:53.520><c> is</c><00:07:53.840><c> 1000</c><00:07:54.879><c> and</c><00:07:55.440><c> the</c><00:07:55.680><c> array</c><00:07:56.160><c> is</c><00:07:56.319><c> of</c>

00:07:56.710 --> 00:07:56.720 align:start position:0%
base address is 1000 and the array is of
 

00:07:56.720 --> 00:07:59.830 align:start position:0%
base address is 1000 and the array is of
integer<00:07:57.280><c> type</c><00:07:57.840><c> l</c><00:07:58.479><c> so</c><00:07:58.720><c> just</c><00:07:59.199><c> put</c>

00:07:59.830 --> 00:07:59.840 align:start position:0%
integer type l so just put
 

00:07:59.840 --> 00:08:02.950 align:start position:0%
integer type l so just put
all<00:08:00.160><c> the</c><00:08:00.319><c> given</c><00:08:00.720><c> data</c><00:08:01.520><c> into</c><00:08:01.840><c> the</c><00:08:02.160><c> elements</c>

00:08:02.950 --> 00:08:02.960 align:start position:0%
all the given data into the elements
 

00:08:02.960 --> 00:08:05.430 align:start position:0%
all the given data into the elements
such<00:08:03.280><c> like</c><00:08:03.599><c> the</c><00:08:03.840><c> first</c><00:08:04.080><c> one</c><00:08:04.319><c> is</c><00:08:04.560><c> i</c><00:08:04.879><c> i</c><00:08:05.039><c> is</c><00:08:05.199><c> equal</c>

00:08:05.430 --> 00:08:05.440 align:start position:0%
such like the first one is i i is equal
 

00:08:05.440 --> 00:08:06.150 align:start position:0%
such like the first one is i i is equal
to<00:08:05.599><c> 6</c>

00:08:06.150 --> 00:08:06.160 align:start position:0%
to 6
 

00:08:06.160 --> 00:08:09.589 align:start position:0%
to 6
size<00:08:06.560><c> of</c><00:08:06.639><c> the</c><00:08:06.879><c> array</c><00:08:07.440><c> is</c><00:08:08.000><c> 9</c><00:08:08.639><c> okay</c><00:08:08.960><c> fine</c>

00:08:09.589 --> 00:08:09.599 align:start position:0%
size of the array is 9 okay fine
 

00:08:09.599 --> 00:08:12.469 align:start position:0%
size of the array is 9 okay fine
then<00:08:10.160><c> the</c><00:08:10.400><c> base</c><00:08:10.639><c> address</c><00:08:11.039><c> is</c><00:08:11.280><c> thousand</c><00:08:12.160><c> and</c>

00:08:12.469 --> 00:08:12.479 align:start position:0%
then the base address is thousand and
 

00:08:12.479 --> 00:08:13.830 align:start position:0%
then the base address is thousand and
what<00:08:12.800><c> exactly</c><00:08:13.280><c> size</c>

00:08:13.830 --> 00:08:13.840 align:start position:0%
what exactly size
 

00:08:13.840 --> 00:08:17.110 align:start position:0%
what exactly size
size<00:08:14.400><c> id</c><00:08:14.720><c> this</c><00:08:15.039><c> size</c><00:08:15.360><c> is</c><00:08:15.440><c> known</c><00:08:15.759><c> as</c><00:08:16.240><c> size</c><00:08:16.800><c> of</c>

00:08:17.110 --> 00:08:17.120 align:start position:0%
size id this size is known as size of
 

00:08:17.120 --> 00:08:20.390 align:start position:0%
size id this size is known as size of
the<00:08:17.360><c> element</c><00:08:18.160><c> not</c><00:08:18.560><c> array</c><00:08:19.199><c> fine</c><00:08:19.759><c> here</c>

00:08:20.390 --> 00:08:20.400 align:start position:0%
the element not array fine here
 

00:08:20.400 --> 00:08:23.589 align:start position:0%
the element not array fine here
the<00:08:20.639><c> size</c><00:08:21.120><c> of</c><00:08:21.199><c> the</c><00:08:21.360><c> element</c><00:08:22.000><c> is</c><00:08:22.800><c> two</c><00:08:23.039><c> bytes</c>

00:08:23.589 --> 00:08:23.599 align:start position:0%
the size of the element is two bytes
 

00:08:23.599 --> 00:08:25.990 align:start position:0%
the size of the element is two bytes
just<00:08:23.919><c> because</c><00:08:24.400><c> it</c><00:08:24.560><c> is</c><00:08:24.720><c> of</c><00:08:24.879><c> type</c><00:08:25.199><c> and</c><00:08:25.440><c> integer</c>

00:08:25.990 --> 00:08:26.000 align:start position:0%
just because it is of type and integer
 

00:08:26.000 --> 00:08:27.110 align:start position:0%
just because it is of type and integer
type<00:08:26.240><c> an</c><00:08:26.400><c> error</c>

00:08:27.110 --> 00:08:27.120 align:start position:0%
type an error
 

00:08:27.120 --> 00:08:30.390 align:start position:0%
type an error
fine<00:08:27.599><c> so</c><00:08:27.759><c> size</c><00:08:28.080><c> is</c><00:08:28.240><c> equal</c><00:08:28.479><c> to</c><00:08:28.639><c> 2</c><00:08:29.280><c> and</c><00:08:29.840><c> array</c><00:08:30.240><c> is</c>

00:08:30.390 --> 00:08:30.400 align:start position:0%
fine so size is equal to 2 and array is
 

00:08:30.400 --> 00:08:31.430 align:start position:0%
fine so size is equal to 2 and array is
a<00:08:30.560><c> of</c><00:08:30.800><c> 9</c>

00:08:31.430 --> 00:08:31.440 align:start position:0%
a of 9
 

00:08:31.440 --> 00:08:34.230 align:start position:0%
a of 9
so<00:08:31.680><c> students</c><00:08:32.159><c> in</c><00:08:32.399><c> a</c><00:08:32.560><c> of</c><00:08:32.800><c> 9</c><00:08:33.200><c> array</c><00:08:33.760><c> the</c><00:08:33.839><c> element</c>

00:08:34.230 --> 00:08:34.240 align:start position:0%
so students in a of 9 array the element
 

00:08:34.240 --> 00:08:35.750 align:start position:0%
so students in a of 9 array the element
starts<00:08:34.640><c> from</c><00:08:34.880><c> index</c><00:08:35.279><c> 0</c>

00:08:35.750 --> 00:08:35.760 align:start position:0%
starts from index 0
 

00:08:35.760 --> 00:08:39.269 align:start position:0%
starts from index 0
and<00:08:36.000><c> upper</c><00:08:36.240><c> bound</c><00:08:36.560><c> is</c><00:08:36.880><c> a</c><00:08:37.360><c> so</c><00:08:37.839><c> l</c><00:08:38.080><c> is</c><00:08:38.240><c> equal</c><00:08:38.560><c> to</c>

00:08:39.269 --> 00:08:39.279 align:start position:0%
and upper bound is a so l is equal to
 

00:08:39.279 --> 00:08:42.870 align:start position:0%
and upper bound is a so l is equal to
0<00:08:40.000><c> and</c><00:08:40.240><c> u</c><00:08:40.479><c> is</c><00:08:40.640><c> equal</c><00:08:40.959><c> to</c><00:08:41.599><c> 8</c><00:08:42.240><c> fine</c>

00:08:42.870 --> 00:08:42.880 align:start position:0%
0 and u is equal to 8 fine
 

00:08:42.880 --> 00:08:45.509 align:start position:0%
0 and u is equal to 8 fine
so<00:08:43.519><c> next</c><00:08:43.839><c> is</c><00:08:44.320><c> to</c><00:08:44.480><c> put</c><00:08:44.720><c> these</c><00:08:44.959><c> values</c><00:08:45.279><c> in</c><00:08:45.360><c> the</c>

00:08:45.509 --> 00:08:45.519 align:start position:0%
so next is to put these values in the
 

00:08:45.519 --> 00:08:46.230 align:start position:0%
so next is to put these values in the
formula

00:08:46.230 --> 00:08:46.240 align:start position:0%
formula
 

00:08:46.240 --> 00:08:48.310 align:start position:0%
formula
the<00:08:46.399><c> formula</c><00:08:46.959><c> is</c><00:08:47.120><c> a</c><00:08:47.279><c> of</c><00:08:47.440><c> i</c><00:08:47.600><c> is</c><00:08:47.680><c> equal</c><00:08:47.920><c> to</c><00:08:48.080><c> base</c>

00:08:48.310 --> 00:08:48.320 align:start position:0%
the formula is a of i is equal to base
 

00:08:48.320 --> 00:08:51.269 align:start position:0%
the formula is a of i is equal to base
address<00:08:48.880><c> plus</c><00:08:49.120><c> i</c><00:08:49.360><c> minus</c><00:08:49.760><c> l</c><00:08:50.000><c> multiply</c><00:08:50.480><c> by</c><00:08:50.720><c> size</c>

00:08:51.269 --> 00:08:51.279 align:start position:0%
address plus i minus l multiply by size
 

00:08:51.279 --> 00:08:54.550 align:start position:0%
address plus i minus l multiply by size
base<00:08:51.519><c> address</c><00:08:51.920><c> is</c><00:08:52.000><c> 1000</c><00:08:52.880><c> i</c><00:08:53.360><c> see</c><00:08:54.080><c> l</c>

00:08:54.550 --> 00:08:54.560 align:start position:0%
base address is 1000 i see l
 

00:08:54.560 --> 00:08:57.590 align:start position:0%
base address is 1000 i see l
zero<00:08:55.200><c> obviously</c><00:08:55.600><c> lower</c><00:08:55.839><c> bound</c><00:08:56.160><c> is</c><00:08:56.240><c> zero</c><00:08:56.880><c> then</c>

00:08:57.590 --> 00:08:57.600 align:start position:0%
zero obviously lower bound is zero then
 

00:08:57.600 --> 00:09:00.070 align:start position:0%
zero obviously lower bound is zero then
size<00:08:57.920><c> is</c><00:08:58.000><c> equal</c><00:08:58.240><c> to</c><00:08:58.399><c> two</c><00:08:58.720><c> so</c><00:08:59.040><c> our</c><00:08:59.279><c> answer</c><00:08:59.680><c> is</c>

00:09:00.070 --> 00:09:00.080 align:start position:0%
size is equal to two so our answer is
 

00:09:00.080 --> 00:09:00.949 align:start position:0%
size is equal to two so our answer is
one<00:09:00.320><c> zero</c>

00:09:00.949 --> 00:09:00.959 align:start position:0%
one zero
 

00:09:00.959 --> 00:09:03.509 align:start position:0%
one zero
six<00:09:01.279><c> two</c><00:09:02.080><c> another</c><00:09:02.480><c> question</c><00:09:02.880><c> is</c><00:09:02.959><c> that</c><00:09:03.200><c> that</c>

00:09:03.509 --> 00:09:03.519 align:start position:0%
six two another question is that that
 

00:09:03.519 --> 00:09:05.269 align:start position:0%
six two another question is that that
how<00:09:03.680><c> many</c><00:09:03.920><c> total</c><00:09:04.160><c> elements</c><00:09:04.560><c> are</c><00:09:04.720><c> there</c>

00:09:05.269 --> 00:09:05.279 align:start position:0%
how many total elements are there
 

00:09:05.279 --> 00:09:06.790 align:start position:0%
how many total elements are there
you<00:09:05.440><c> can</c><00:09:05.600><c> easily</c><00:09:06.000><c> find</c><00:09:06.240><c> it</c><00:09:06.399><c> out</c><00:09:06.560><c> with</c><00:09:06.720><c> the</c>

00:09:06.790 --> 00:09:06.800 align:start position:0%
you can easily find it out with the
 

00:09:06.800 --> 00:09:08.710 align:start position:0%
you can easily find it out with the
formula<00:09:07.360><c> u</c><00:09:07.519><c> minus</c>

00:09:08.710 --> 00:09:08.720 align:start position:0%
formula u minus
 

00:09:08.720 --> 00:09:12.150 align:start position:0%
formula u minus
l<00:09:09.120><c> plus</c><00:09:09.440><c> 1</c><00:09:10.000><c> or</c><00:09:10.880><c> in</c><00:09:11.120><c> this</c><00:09:11.360><c> you</c><00:09:11.440><c> can</c><00:09:11.600><c> easily</c><00:09:11.920><c> get</c>

00:09:12.150 --> 00:09:12.160 align:start position:0%
l plus 1 or in this you can easily get
 

00:09:12.160 --> 00:09:13.829 align:start position:0%
l plus 1 or in this you can easily get
it<00:09:12.240><c> that</c><00:09:12.480><c> nine</c><00:09:12.720><c> elements</c><00:09:13.120><c> are</c><00:09:13.279><c> there</c><00:09:13.519><c> but</c>

00:09:13.829 --> 00:09:13.839 align:start position:0%
it that nine elements are there but
 

00:09:13.839 --> 00:09:16.070 align:start position:0%
it that nine elements are there but
how<00:09:14.080><c> can</c><00:09:14.240><c> we</c><00:09:14.399><c> get</c><00:09:14.640><c> it</c><00:09:14.720><c> from</c><00:09:14.880><c> the</c><00:09:15.040><c> formula</c><00:09:15.760><c> upper</c>

00:09:16.070 --> 00:09:16.080 align:start position:0%
how can we get it from the formula upper
 

00:09:16.080 --> 00:09:17.590 align:start position:0%
how can we get it from the formula upper
bound<00:09:16.800><c> students</c>

00:09:17.590 --> 00:09:17.600 align:start position:0%
bound students
 

00:09:17.600 --> 00:09:20.870 align:start position:0%
bound students
upper<00:09:18.080><c> bound</c><00:09:18.560><c> is</c>

00:09:20.870 --> 00:09:20.880 align:start position:0%
upper bound is
 

00:09:20.880 --> 00:09:23.990 align:start position:0%
upper bound is
forgot<00:09:21.680><c> students</c><00:09:22.320><c> upper</c><00:09:22.800><c> bound</c><00:09:23.440><c> is</c>

00:09:23.990 --> 00:09:24.000 align:start position:0%
forgot students upper bound is
 

00:09:24.000 --> 00:09:27.430 align:start position:0%
forgot students upper bound is
8<00:09:24.880><c> minus</c><00:09:25.839><c> l</c><00:09:26.160><c> is</c><00:09:26.640><c> 0</c>

00:09:27.430 --> 00:09:27.440 align:start position:0%
8 minus l is 0
 

00:09:27.440 --> 00:09:30.470 align:start position:0%
8 minus l is 0
plus<00:09:27.760><c> 1</c><00:09:28.080><c> so</c><00:09:28.320><c> 8</c><00:09:28.640><c> plus</c><00:09:28.959><c> 1</c><00:09:29.200><c> becomes</c><00:09:30.000><c> 9</c>

00:09:30.470 --> 00:09:30.480 align:start position:0%
plus 1 so 8 plus 1 becomes 9
 

00:09:30.480 --> 00:09:33.509 align:start position:0%
plus 1 so 8 plus 1 becomes 9
so<00:09:30.720><c> here</c><00:09:30.959><c> 9</c><00:09:31.279><c> elements</c><00:09:31.680><c> are</c><00:09:31.839><c> there</c><00:09:32.560><c> now</c><00:09:33.279><c> i</c><00:09:33.360><c> am</c>

00:09:33.509 --> 00:09:33.519 align:start position:0%
so here 9 elements are there now i am
 

00:09:33.519 --> 00:09:34.310 align:start position:0%
so here 9 elements are there now i am
taking<00:09:33.760><c> the</c><00:09:33.920><c> next</c>

00:09:34.310 --> 00:09:34.320 align:start position:0%
taking the next
 

00:09:34.320 --> 00:09:37.509 align:start position:0%
taking the next
example<00:09:35.279><c> next</c><00:09:35.680><c> example</c><00:09:36.320><c> is</c><00:09:36.800><c> the</c><00:09:36.959><c> calculate</c>

00:09:37.509 --> 00:09:37.519 align:start position:0%
example next example is the calculate
 

00:09:37.519 --> 00:09:39.030 align:start position:0%
example next example is the calculate
the<00:09:37.680><c> address</c><00:09:38.080><c> of</c><00:09:38.240><c> elements</c><00:09:38.640><c> in</c><00:09:38.720><c> single</c>

00:09:39.030 --> 00:09:39.040 align:start position:0%
the address of elements in single
 

00:09:39.040 --> 00:09:40.310 align:start position:0%
the address of elements in single
dimensional<00:09:39.680><c> error</c>

00:09:40.310 --> 00:09:40.320 align:start position:0%
dimensional error
 

00:09:40.320 --> 00:09:43.670 align:start position:0%
dimensional error
example<00:09:40.800><c> 2</c><00:09:41.760><c> c</c><00:09:42.480><c> must</c><00:09:42.800><c> create</c><00:09:43.120><c> the</c><00:09:43.279><c> question</c>

00:09:43.670 --> 00:09:43.680 align:start position:0%
example 2 c must create the question
 

00:09:43.680 --> 00:09:44.230 align:start position:0%
example 2 c must create the question
first

00:09:44.230 --> 00:09:44.240 align:start position:0%
first
 

00:09:44.240 --> 00:09:46.790 align:start position:0%
first
the<00:09:44.399><c> question</c><00:09:44.800><c> is</c><00:09:45.279><c> calculate</c><00:09:45.760><c> the</c><00:09:46.000><c> address</c><00:09:46.399><c> of</c>

00:09:46.790 --> 00:09:46.800 align:start position:0%
the question is calculate the address of
 

00:09:46.800 --> 00:09:48.389 align:start position:0%
the question is calculate the address of
m<00:09:47.040><c> of</c><00:09:47.200><c> minus</c><00:09:47.680><c> 3</c>

00:09:48.389 --> 00:09:48.399 align:start position:0%
m of minus 3
 

00:09:48.399 --> 00:09:51.670 align:start position:0%
m of minus 3
m<00:09:48.640><c> of</c><00:09:49.120><c> minus</c><00:09:49.519><c> 3</c><00:09:50.000><c> where</c><00:09:50.560><c> the</c><00:09:50.800><c> array</c><00:09:51.200><c> is</c>

00:09:51.670 --> 00:09:51.680 align:start position:0%
m of minus 3 where the array is
 

00:09:51.680 --> 00:09:54.710 align:start position:0%
m of minus 3 where the array is
m<00:09:51.920><c> of</c><00:09:52.160><c> minus</c><00:09:52.560><c> 9</c><00:09:52.880><c> dot</c><00:09:53.200><c> dot</c><00:09:53.519><c> dot</c><00:09:53.920><c> 7</c>

00:09:54.710 --> 00:09:54.720 align:start position:0%
m of minus 9 dot dot dot 7
 

00:09:54.720 --> 00:09:58.470 align:start position:0%
m of minus 9 dot dot dot 7
students<00:09:55.360><c> here</c><00:09:55.839><c> m</c><00:09:56.080><c> of</c><00:09:56.320><c> minus</c><00:09:56.720><c> 9</c><00:09:57.120><c> triple</c><00:09:57.440><c> dot</c><00:09:57.760><c> 7</c>

00:09:58.470 --> 00:09:58.480 align:start position:0%
students here m of minus 9 triple dot 7
 

00:09:58.480 --> 00:10:01.190 align:start position:0%
students here m of minus 9 triple dot 7
this<00:09:58.720><c> is</c><00:09:58.880><c> the</c><00:09:59.040><c> range</c><00:09:59.360><c> of</c><00:09:59.519><c> the</c><00:09:59.760><c> array</c><00:10:00.160><c> indexes</c>

00:10:01.190 --> 00:10:01.200 align:start position:0%
this is the range of the array indexes
 

00:10:01.200 --> 00:10:01.829 align:start position:0%
this is the range of the array indexes
range<00:10:01.600><c> of</c>

00:10:01.829 --> 00:10:01.839 align:start position:0%
range of
 

00:10:01.839 --> 00:10:04.710 align:start position:0%
range of
either<00:10:02.240><c> array</c><00:10:02.480><c> indexes</c><00:10:03.279><c> minus</c><00:10:03.680><c> 9</c><00:10:04.079><c> is</c><00:10:04.240><c> a</c><00:10:04.399><c> lower</c>

00:10:04.710 --> 00:10:04.720 align:start position:0%
either array indexes minus 9 is a lower
 

00:10:04.720 --> 00:10:05.269 align:start position:0%
either array indexes minus 9 is a lower
amount

00:10:05.269 --> 00:10:05.279 align:start position:0%
amount
 

00:10:05.279 --> 00:10:08.470 align:start position:0%
amount
and<00:10:05.600><c> 7</c><00:10:06.240><c> is</c><00:10:06.399><c> the</c><00:10:06.560><c> upper</c><00:10:06.959><c> part</c><00:10:07.519><c> so</c><00:10:07.680><c> make</c><00:10:07.920><c> sure</c>

00:10:08.470 --> 00:10:08.480 align:start position:0%
and 7 is the upper part so make sure
 

00:10:08.480 --> 00:10:11.670 align:start position:0%
and 7 is the upper part so make sure
that<00:10:08.720><c> here</c><00:10:09.440><c> this</c><00:10:09.680><c> minus</c><00:10:10.079><c> 9</c><00:10:10.399><c> and</c><00:10:10.560><c> 7</c><00:10:10.959><c> is</c><00:10:11.200><c> not</c><00:10:11.440><c> this</c>

00:10:11.670 --> 00:10:11.680 align:start position:0%
that here this minus 9 and 7 is not this
 

00:10:11.680 --> 00:10:13.430 align:start position:0%
that here this minus 9 and 7 is not this
two<00:10:11.920><c> dimensional</c><00:10:12.480><c> array</c><00:10:12.720><c> but</c><00:10:12.959><c> it</c><00:10:13.120><c> shows</c><00:10:13.360><c> the</c>

00:10:13.430 --> 00:10:13.440 align:start position:0%
two dimensional array but it shows the
 

00:10:13.440 --> 00:10:15.350 align:start position:0%
two dimensional array but it shows the
single<00:10:13.760><c> dimensional</c><00:10:14.320><c> array</c><00:10:14.560><c> but</c><00:10:14.720><c> the</c><00:10:14.880><c> range</c>

00:10:15.350 --> 00:10:15.360 align:start position:0%
single dimensional array but the range
 

00:10:15.360 --> 00:10:15.990 align:start position:0%
single dimensional array but the range
of

00:10:15.990 --> 00:10:16.000 align:start position:0%
of
 

00:10:16.000 --> 00:10:19.910 align:start position:0%
of
indexes<00:10:17.200><c> fine</c><00:10:17.760><c> so</c><00:10:18.320><c> here</c><00:10:18.959><c> we</c><00:10:19.120><c> need</c><00:10:19.279><c> to</c><00:10:19.440><c> find</c><00:10:19.680><c> out</c>

00:10:19.910 --> 00:10:19.920 align:start position:0%
indexes fine so here we need to find out
 

00:10:19.920 --> 00:10:20.790 align:start position:0%
indexes fine so here we need to find out
the<00:10:20.079><c> address</c><00:10:20.560><c> of</c>

00:10:20.790 --> 00:10:20.800 align:start position:0%
the address of
 

00:10:20.800 --> 00:10:23.590 align:start position:0%
the address of
m<00:10:20.959><c> of</c><00:10:21.120><c> minus</c><00:10:21.519><c> 3</c><00:10:21.920><c> the</c><00:10:22.079><c> given</c><00:10:22.480><c> array</c><00:10:22.800><c> is</c><00:10:23.040><c> m</c><00:10:23.279><c> of</c>

00:10:23.590 --> 00:10:23.600 align:start position:0%
m of minus 3 the given array is m of
 

00:10:23.600 --> 00:10:24.389 align:start position:0%
m of minus 3 the given array is m of
minus<00:10:24.000><c> 9</c>

00:10:24.389 --> 00:10:24.399 align:start position:0%
minus 9
 

00:10:24.399 --> 00:10:27.509 align:start position:0%
minus 9
to<00:10:24.640><c> 7</c><00:10:25.120><c> minus</c><00:10:25.519><c> 9</c><00:10:25.760><c> dot</c><00:10:26.000><c> dot</c><00:10:26.320><c> dot</c><00:10:26.959><c> 7</c>

00:10:27.509 --> 00:10:27.519 align:start position:0%
to 7 minus 9 dot dot dot 7
 

00:10:27.519 --> 00:10:30.630 align:start position:0%
to 7 minus 9 dot dot dot 7
that<00:10:27.760><c> means</c><00:10:28.079><c> minus</c><00:10:28.480><c> 9</c><00:10:28.800><c> to</c><00:10:29.279><c> 7</c><00:10:30.000><c> with</c><00:10:30.240><c> the</c><00:10:30.399><c> base</c>

00:10:30.630 --> 00:10:30.640 align:start position:0%
that means minus 9 to 7 with the base
 

00:10:30.640 --> 00:10:31.990 align:start position:0%
that means minus 9 to 7 with the base
address<00:10:31.120><c> one</c><00:10:31.279><c> double</c><00:10:31.600><c> zero</c>

00:10:31.990 --> 00:10:32.000 align:start position:0%
address one double zero
 

00:10:32.000 --> 00:10:35.110 align:start position:0%
address one double zero
two<00:10:32.720><c> fine</c><00:10:33.200><c> so</c><00:10:33.680><c> it</c><00:10:33.920><c> can</c><00:10:34.079><c> be</c><00:10:34.240><c> a</c><00:10:34.320><c> floating</c><00:10:34.800><c> type</c>

00:10:35.110 --> 00:10:35.120 align:start position:0%
two fine so it can be a floating type
 

00:10:35.120 --> 00:10:35.590 align:start position:0%
two fine so it can be a floating type
array

00:10:35.590 --> 00:10:35.600 align:start position:0%
array
 

00:10:35.600 --> 00:10:37.990 align:start position:0%
array
students<00:10:36.240><c> the</c><00:10:36.480><c> array</c><00:10:36.800><c> type</c><00:10:37.120><c> is</c><00:10:37.360><c> also</c><00:10:37.680><c> given</c>

00:10:37.990 --> 00:10:38.000 align:start position:0%
students the array type is also given
 

00:10:38.000 --> 00:10:40.230 align:start position:0%
students the array type is also given
it's<00:10:38.240><c> a</c><00:10:38.320><c> floating</c><00:10:38.720><c> type</c><00:10:39.040><c> error</c>

00:10:40.230 --> 00:10:40.240 align:start position:0%
it's a floating type error
 

00:10:40.240 --> 00:10:42.470 align:start position:0%
it's a floating type error
okay<00:10:40.959><c> also</c><00:10:41.279><c> calculate</c><00:10:41.839><c> the</c><00:10:41.920><c> number</c><00:10:42.240><c> of</c>

00:10:42.470 --> 00:10:42.480 align:start position:0%
okay also calculate the number of
 

00:10:42.480 --> 00:10:43.670 align:start position:0%
okay also calculate the number of
elements<00:10:43.040><c> in</c><00:10:43.200><c> array</c>

00:10:43.670 --> 00:10:43.680 align:start position:0%
elements in array
 

00:10:43.680 --> 00:10:46.870 align:start position:0%
elements in array
so<00:10:43.920><c> we</c><00:10:44.079><c> need</c><00:10:44.240><c> to</c><00:10:44.839><c> also</c><00:10:45.920><c> calculate</c><00:10:46.480><c> the</c><00:10:46.640><c> number</c>

00:10:46.870 --> 00:10:46.880 align:start position:0%
so we need to also calculate the number
 

00:10:46.880 --> 00:10:48.470 align:start position:0%
so we need to also calculate the number
of<00:10:47.040><c> elements</c><00:10:47.680><c> in</c><00:10:47.760><c> the</c><00:10:47.920><c> error</c>

00:10:48.470 --> 00:10:48.480 align:start position:0%
of elements in the error
 

00:10:48.480 --> 00:10:51.269 align:start position:0%
of elements in the error
so<00:10:48.800><c> in</c><00:10:48.959><c> this</c><00:10:49.279><c> question</c><00:10:49.680><c> students</c><00:10:50.399><c> we</c><00:10:50.800><c> have</c>

00:10:51.269 --> 00:10:51.279 align:start position:0%
so in this question students we have
 

00:10:51.279 --> 00:10:52.630 align:start position:0%
so in this question students we have
each<00:10:51.519><c> and</c><00:10:51.680><c> every</c><00:10:51.920><c> data</c>

00:10:52.630 --> 00:10:52.640 align:start position:0%
each and every data
 

00:10:52.640 --> 00:10:55.910 align:start position:0%
each and every data
just<00:10:53.040><c> put</c><00:10:53.279><c> it</c><00:10:53.360><c> down</c><00:10:54.560><c> in</c><00:10:54.720><c> the</c><00:10:55.040><c> elements</c>

00:10:55.910 --> 00:10:55.920 align:start position:0%
just put it down in the elements
 

00:10:55.920 --> 00:10:58.710 align:start position:0%
just put it down in the elements
formula<00:10:56.800><c> formula</c><00:10:57.440><c> is</c><00:10:57.920><c> total</c><00:10:58.240><c> number</c><00:10:58.560><c> of</c>

00:10:58.710 --> 00:10:58.720 align:start position:0%
formula formula is total number of
 

00:10:58.720 --> 00:11:01.829 align:start position:0%
formula formula is total number of
elements<00:10:59.200><c> are</c><00:10:59.360><c> in</c><00:10:59.519><c> array</c><00:10:59.839><c> u</c><00:11:00.079><c> minus</c><00:11:00.560><c> l</c><00:11:00.800><c> plus</c><00:11:01.279><c> 1</c>

00:11:01.829 --> 00:11:01.839 align:start position:0%
elements are in array u minus l plus 1
 

00:11:01.839 --> 00:11:05.509 align:start position:0%
elements are in array u minus l plus 1
u<00:11:02.079><c> minus</c><00:11:02.399><c> l</c><00:11:02.640><c> plus</c><00:11:03.200><c> 1</c><00:11:03.760><c> which</c><00:11:04.000><c> is</c><00:11:04.240><c> equal</c><00:11:04.720><c> to</c>

00:11:05.509 --> 00:11:05.519 align:start position:0%
u minus l plus 1 which is equal to
 

00:11:05.519 --> 00:11:08.710 align:start position:0%
u minus l plus 1 which is equal to
like<00:11:06.160><c> 7</c><00:11:06.720><c> minus</c><00:11:07.120><c> minus</c><00:11:07.440><c> 9</c><00:11:07.920><c> plus</c><00:11:08.240><c> 1</c>

00:11:08.710 --> 00:11:08.720 align:start position:0%
like 7 minus minus 9 plus 1
 

00:11:08.720 --> 00:11:12.230 align:start position:0%
like 7 minus minus 9 plus 1
7<00:11:09.040><c> minus</c><00:11:09.360><c> 1</c><00:11:09.519><c> minus</c><00:11:09.839><c> 9</c><00:11:10.160><c> plus</c><00:11:10.399><c> 1</c><00:11:10.720><c> it</c><00:11:10.880><c> becomes</c><00:11:11.519><c> 70</c>

00:11:12.230 --> 00:11:12.240 align:start position:0%
7 minus 1 minus 9 plus 1 it becomes 70
 

00:11:12.240 --> 00:11:14.389 align:start position:0%
7 minus 1 minus 9 plus 1 it becomes 70
so<00:11:12.399><c> here</c><00:11:12.640><c> you</c><00:11:12.720><c> can</c><00:11:12.880><c> see</c><00:11:13.120><c> that</c><00:11:13.279><c> there</c><00:11:13.519><c> are</c><00:11:13.680><c> 17</c>

00:11:14.389 --> 00:11:14.399 align:start position:0%
so here you can see that there are 17
 

00:11:14.399 --> 00:11:15.590 align:start position:0%
so here you can see that there are 17
elements<00:11:15.040><c> are</c><00:11:15.200><c> there</c>

00:11:15.590 --> 00:11:15.600 align:start position:0%
elements are there
 

00:11:15.600 --> 00:11:19.670 align:start position:0%
elements are there
17<00:11:16.079><c> elements</c><00:11:16.560><c> are</c><00:11:17.040><c> there</c><00:11:17.680><c> fine</c><00:11:18.320><c> i</c><00:11:18.560><c> is</c><00:11:18.720><c> equal</c><00:11:19.040><c> to</c>

00:11:19.670 --> 00:11:19.680 align:start position:0%
17 elements are there fine i is equal to
 

00:11:19.680 --> 00:11:21.430 align:start position:0%
17 elements are there fine i is equal to
what<00:11:19.920><c> do</c><00:11:20.000><c> you</c><00:11:20.079><c> mean</c><00:11:20.240><c> by</c><00:11:20.399><c> the</c><00:11:20.560><c> i</c><00:11:20.800><c> i</c><00:11:21.040><c> is</c><00:11:21.120><c> equal</c><00:11:21.279><c> to</c>

00:11:21.430 --> 00:11:21.440 align:start position:0%
what do you mean by the i i is equal to
 

00:11:21.440 --> 00:11:23.269 align:start position:0%
what do you mean by the i i is equal to
minus<00:11:21.839><c> 3</c><00:11:22.240><c> because</c><00:11:22.480><c> we</c><00:11:22.640><c> need</c><00:11:22.800><c> to</c><00:11:22.880><c> find</c><00:11:23.120><c> the</c>

00:11:23.269 --> 00:11:23.279 align:start position:0%
minus 3 because we need to find the
 

00:11:23.279 --> 00:11:25.190 align:start position:0%
minus 3 because we need to find the
address<00:11:23.600><c> of</c><00:11:23.839><c> m</c><00:11:24.079><c> of</c><00:11:24.240><c> minus</c><00:11:24.640><c> 3</c>

00:11:25.190 --> 00:11:25.200 align:start position:0%
address of m of minus 3
 

00:11:25.200 --> 00:11:27.590 align:start position:0%
address of m of minus 3
okay<00:11:25.519><c> lower</c><00:11:25.839><c> bound</c><00:11:26.399><c> lower</c><00:11:26.720><c> bound</c><00:11:27.040><c> is</c><00:11:27.200><c> minus</c>

00:11:27.590 --> 00:11:27.600 align:start position:0%
okay lower bound lower bound is minus
 

00:11:27.600 --> 00:11:28.949 align:start position:0%
okay lower bound lower bound is minus
nine<00:11:28.160><c> upper</c><00:11:28.480><c> bound</c>

00:11:28.949 --> 00:11:28.959 align:start position:0%
nine upper bound
 

00:11:28.959 --> 00:11:31.990 align:start position:0%
nine upper bound
is<00:11:29.600><c> seven</c><00:11:30.320><c> and</c><00:11:30.800><c> size</c><00:11:31.440><c> is</c>

00:11:31.990 --> 00:11:32.000 align:start position:0%
is seven and size is
 

00:11:32.000 --> 00:11:34.949 align:start position:0%
is seven and size is
four<00:11:32.720><c> fine</c><00:11:33.279><c> so</c><00:11:33.519><c> just</c><00:11:33.839><c> put</c><00:11:34.079><c> this</c><00:11:34.399><c> whole</c><00:11:34.720><c> thing</c>

00:11:34.949 --> 00:11:34.959 align:start position:0%
four fine so just put this whole thing
 

00:11:34.959 --> 00:11:36.230 align:start position:0%
four fine so just put this whole thing
into<00:11:35.200><c> the</c><00:11:35.360><c> formula</c>

00:11:36.230 --> 00:11:36.240 align:start position:0%
into the formula
 

00:11:36.240 --> 00:11:39.190 align:start position:0%
into the formula
the<00:11:36.399><c> formula</c><00:11:36.959><c> is</c><00:11:37.760><c> a</c><00:11:38.079><c> of</c><00:11:38.240><c> i</c><00:11:38.399><c> is</c><00:11:38.480><c> equal</c><00:11:38.720><c> to</c><00:11:38.880><c> base</c>

00:11:39.190 --> 00:11:39.200 align:start position:0%
the formula is a of i is equal to base
 

00:11:39.200 --> 00:11:39.910 align:start position:0%
the formula is a of i is equal to base
address

00:11:39.910 --> 00:11:39.920 align:start position:0%
address
 

00:11:39.920 --> 00:11:43.030 align:start position:0%
address
plus<00:11:40.480><c> i</c><00:11:40.720><c> minus</c><00:11:41.279><c> l</c><00:11:42.160><c> multiplied</c><00:11:42.640><c> by</c>

00:11:43.030 --> 00:11:43.040 align:start position:0%
plus i minus l multiplied by
 

00:11:43.040 --> 00:11:46.630 align:start position:0%
plus i minus l multiplied by
sine<00:11:43.839><c> a</c><00:11:44.079><c> of</c><00:11:44.240><c> phi</c><00:11:44.720><c> that</c><00:11:44.959><c> means</c><00:11:45.360><c> m</c><00:11:45.600><c> of</c><00:11:45.760><c> minus</c>

00:11:46.630 --> 00:11:46.640 align:start position:0%
sine a of phi that means m of minus
 

00:11:46.640 --> 00:11:49.990 align:start position:0%
sine a of phi that means m of minus
m<00:11:46.880><c> of</c><00:11:47.040><c> minus</c><00:11:47.760><c> three</c><00:11:48.320><c> so</c><00:11:48.720><c> m</c><00:11:48.959><c> of</c><00:11:49.120><c> minus</c><00:11:49.519><c> three</c>

00:11:49.990 --> 00:11:50.000 align:start position:0%
m of minus three so m of minus three
 

00:11:50.000 --> 00:11:52.230 align:start position:0%
m of minus three so m of minus three
is<00:11:50.240><c> equal</c><00:11:50.560><c> to</c><00:11:51.040><c> base</c><00:11:51.279><c> address</c><00:11:51.680><c> students</c><00:11:52.000><c> base</c>

00:11:52.230 --> 00:11:52.240 align:start position:0%
is equal to base address students base
 

00:11:52.240 --> 00:11:53.829 align:start position:0%
is equal to base address students base
address<00:11:52.560><c> is</c><00:11:52.639><c> one</c><00:11:52.800><c> double</c><00:11:53.040><c> zero</c><00:11:53.360><c> two</c>

00:11:53.829 --> 00:11:53.839 align:start position:0%
address is one double zero two
 

00:11:53.839 --> 00:11:56.870 align:start position:0%
address is one double zero two
so<00:11:54.079><c> one</c><00:11:54.240><c> number</c><00:11:54.480><c> zero</c><00:11:54.880><c> two</c><00:11:55.360><c> plus</c><00:11:56.399><c> i</c>

00:11:56.870 --> 00:11:56.880 align:start position:0%
so one number zero two plus i
 

00:11:56.880 --> 00:11:59.910 align:start position:0%
so one number zero two plus i
i<00:11:57.120><c> that</c><00:11:57.360><c> means</c><00:11:57.600><c> minus</c><00:11:58.000><c> 3</c><00:11:58.320><c> minus</c><00:11:58.720><c> minus</c><00:11:59.120><c> l</c>

00:11:59.910 --> 00:11:59.920 align:start position:0%
i that means minus 3 minus minus l
 

00:11:59.920 --> 00:12:03.509 align:start position:0%
i that means minus 3 minus minus l
3<00:12:00.160><c> minus</c><00:12:00.480><c> 3</c><00:12:00.639><c> minus</c><00:12:00.959><c> minus</c><00:12:01.360><c> 9</c><00:12:02.240><c> calculating</c><00:12:02.880><c> this</c>

00:12:03.509 --> 00:12:03.519 align:start position:0%
3 minus 3 minus minus 9 calculating this
 

00:12:03.519 --> 00:12:07.110 align:start position:0%
3 minus 3 minus minus 9 calculating this
sum<00:12:04.160><c> solve</c><00:12:04.480><c> it</c><00:12:04.720><c> and</c><00:12:04.959><c> you</c><00:12:05.120><c> get</c><00:12:05.360><c> the</c><00:12:05.519><c> answer</c><00:12:06.320><c> 1</c><00:12:06.560><c> 0</c>

00:12:07.110 --> 00:12:07.120 align:start position:0%
sum solve it and you get the answer 1 0
 

00:12:07.120 --> 00:12:10.310 align:start position:0%
sum solve it and you get the answer 1 0
2<00:12:07.600><c> 6.</c><00:12:08.240><c> so</c><00:12:08.720><c> students</c><00:12:09.279><c> one</c><00:12:09.519><c> zero</c><00:12:09.760><c> two</c><00:12:09.920><c> six</c>

00:12:10.310 --> 00:12:10.320 align:start position:0%
2 6. so students one zero two six
 

00:12:10.320 --> 00:12:13.350 align:start position:0%
2 6. so students one zero two six
is<00:12:10.560><c> our</c><00:12:11.120><c> address</c><00:12:11.680><c> of</c><00:12:11.760><c> the</c><00:12:11.920><c> element</c><00:12:12.480><c> m</c><00:12:12.720><c> of</c><00:12:12.959><c> minus</c>

00:12:13.350 --> 00:12:13.360 align:start position:0%
is our address of the element m of minus
 

00:12:13.360 --> 00:12:14.790 align:start position:0%
is our address of the element m of minus
three

00:12:14.790 --> 00:12:14.800 align:start position:0%
three
 

00:12:14.800 --> 00:12:18.550 align:start position:0%
three
now<00:12:15.760><c> go</c><00:12:15.920><c> ahead</c><00:12:17.120><c> the</c><00:12:17.279><c> next</c><00:12:17.519><c> topic</c><00:12:17.920><c> is</c><00:12:18.079><c> memory</c>

00:12:18.550 --> 00:12:18.560 align:start position:0%
now go ahead the next topic is memory
 

00:12:18.560 --> 00:12:19.750 align:start position:0%
now go ahead the next topic is memory
representation<00:12:19.279><c> of</c>

00:12:19.750 --> 00:12:19.760 align:start position:0%
representation of
 

00:12:19.760 --> 00:12:21.990 align:start position:0%
representation of
today<00:12:20.399><c> this</c><00:12:20.639><c> is</c><00:12:20.720><c> our</c><00:12:20.959><c> last</c><00:12:21.200><c> topic</c><00:12:21.519><c> of</c><00:12:21.600><c> today's</c>

00:12:21.990 --> 00:12:22.000 align:start position:0%
today this is our last topic of today's
 

00:12:22.000 --> 00:12:23.670 align:start position:0%
today this is our last topic of today's
lecture

00:12:23.670 --> 00:12:23.680 align:start position:0%
lecture
 

00:12:23.680 --> 00:12:26.150 align:start position:0%
lecture
okay<00:12:24.320><c> first</c><00:12:24.800><c> how</c><00:12:25.040><c> can</c><00:12:25.200><c> you</c><00:12:25.360><c> define</c><00:12:25.760><c> or</c><00:12:25.839><c> how</c><00:12:26.000><c> can</c>

00:12:26.150 --> 00:12:26.160 align:start position:0%
okay first how can you define or how can
 

00:12:26.160 --> 00:12:27.990 align:start position:0%
okay first how can you define or how can
you<00:12:26.320><c> write</c><00:12:26.480><c> the</c><00:12:26.560><c> 2d</c><00:12:26.959><c> array</c><00:12:27.279><c> you</c><00:12:27.360><c> can</c><00:12:27.600><c> write</c><00:12:27.839><c> it</c>

00:12:27.990 --> 00:12:28.000 align:start position:0%
you write the 2d array you can write it
 

00:12:28.000 --> 00:12:28.790 align:start position:0%
you write the 2d array you can write it
like<00:12:28.160><c> this</c>

00:12:28.790 --> 00:12:28.800 align:start position:0%
like this
 

00:12:28.800 --> 00:12:32.150 align:start position:0%
like this
integer<00:12:29.279><c> a</c><00:12:29.440><c> of</c><00:12:29.600><c> 3</c><00:12:29.839><c> 3</c><00:12:30.399><c> in</c><00:12:30.480><c> teacher</c><00:12:30.880><c> a</c><00:12:31.120><c> of</c><00:12:31.279><c> 3</c><00:12:31.600><c> 3</c><00:12:31.920><c> it</c>

00:12:32.150 --> 00:12:32.160 align:start position:0%
integer a of 3 3 in teacher a of 3 3 it
 

00:12:32.160 --> 00:12:32.629 align:start position:0%
integer a of 3 3 in teacher a of 3 3 it
means

00:12:32.629 --> 00:12:32.639 align:start position:0%
means
 

00:12:32.639 --> 00:12:35.910 align:start position:0%
means
data<00:12:33.040><c> type</c><00:12:33.680><c> then</c><00:12:34.320><c> variable</c><00:12:34.800><c> name</c><00:12:35.200><c> then</c>

00:12:35.910 --> 00:12:35.920 align:start position:0%
data type then variable name then
 

00:12:35.920 --> 00:12:39.190 align:start position:0%
data type then variable name then
size<00:12:36.240><c> of</c><00:12:36.480><c> row</c><00:12:36.880><c> 10</c><00:12:37.279><c> size</c><00:12:37.600><c> of</c><00:12:38.079><c> column</c><00:12:38.720><c> so</c>

00:12:39.190 --> 00:12:39.200 align:start position:0%
size of row 10 size of column so
 

00:12:39.200 --> 00:12:42.550 align:start position:0%
size of row 10 size of column so
here<00:12:39.760><c> integer</c><00:12:40.320><c> a</c><00:12:40.560><c> of</c><00:12:40.720><c> 33</c><00:12:41.200><c> it</c><00:12:41.440><c> means</c><00:12:42.160><c> it</c><00:12:42.320><c> is</c><00:12:42.399><c> a</c>

00:12:42.550 --> 00:12:42.560 align:start position:0%
here integer a of 33 it means it is a
 

00:12:42.560 --> 00:12:43.670 align:start position:0%
here integer a of 33 it means it is a
two<00:12:42.800><c> dimensional</c>

00:12:43.670 --> 00:12:43.680 align:start position:0%
two dimensional
 

00:12:43.680 --> 00:12:46.870 align:start position:0%
two dimensional
array<00:12:44.160><c> so</c><00:12:44.399><c> a</c><00:12:44.560><c> is</c><00:12:44.720><c> a</c><00:12:44.800><c> two</c><00:12:45.040><c> dimensional</c><00:12:46.079><c> m</c>

00:12:46.870 --> 00:12:46.880 align:start position:0%
array so a is a two dimensional m
 

00:12:46.880 --> 00:12:50.470 align:start position:0%
array so a is a two dimensional m
students<00:12:47.920><c> here</c><00:12:49.279><c> see</c>

00:12:50.470 --> 00:12:50.480 align:start position:0%
students here see
 

00:12:50.480 --> 00:12:53.829 align:start position:0%
students here see
this<00:12:50.800><c> table</c><00:12:51.440><c> or</c><00:12:51.680><c> this</c><00:12:52.240><c> matrices</c><00:12:53.200><c> this</c><00:12:53.440><c> matrix</c>

00:12:53.829 --> 00:12:53.839 align:start position:0%
this table or this matrices this matrix
 

00:12:53.839 --> 00:12:56.150 align:start position:0%
this table or this matrices this matrix
is<00:12:53.920><c> nothing</c><00:12:54.160><c> but</c><00:12:54.399><c> it's</c><00:12:54.560><c> a</c><00:12:54.720><c> two</c><00:12:54.959><c> dimensional</c>

00:12:56.150 --> 00:12:56.160 align:start position:0%
is nothing but it's a two dimensional
 

00:12:56.160 --> 00:12:58.710 align:start position:0%
is nothing but it's a two dimensional
array<00:12:56.800><c> i</c><00:12:56.959><c> am</c><00:12:57.120><c> just</c><00:12:57.360><c> showing</c><00:12:57.760><c> you</c><00:12:58.000><c> how</c><00:12:58.320><c> can</c><00:12:58.560><c> i</c>

00:12:58.710 --> 00:12:58.720 align:start position:0%
array i am just showing you how can i
 

00:12:58.720 --> 00:13:00.790 align:start position:0%
array i am just showing you how can i
represent<00:12:59.440><c> these</c><00:12:59.680><c> two</c><00:12:59.839><c> dimensional</c><00:13:00.560><c> array</c>

00:13:00.790 --> 00:13:00.800 align:start position:0%
represent these two dimensional array
 

00:13:00.800 --> 00:13:01.829 align:start position:0%
represent these two dimensional array
matrices

00:13:01.829 --> 00:13:01.839 align:start position:0%
matrices
 

00:13:01.839 --> 00:13:04.710 align:start position:0%
matrices
into<00:13:02.079><c> the</c><00:13:02.240><c> memory</c><00:13:03.279><c> fine</c><00:13:03.760><c> the</c><00:13:03.920><c> first</c><00:13:04.240><c> element</c>

00:13:04.710 --> 00:13:04.720 align:start position:0%
into the memory fine the first element
 

00:13:04.720 --> 00:13:06.470 align:start position:0%
into the memory fine the first element
at<00:13:04.959><c> 0</c><00:13:05.279><c> 0</c><00:13:05.839><c> is</c><00:13:06.079><c> at</c>

00:13:06.470 --> 00:13:06.480 align:start position:0%
at 0 0 is at
 

00:13:06.480 --> 00:13:09.509 align:start position:0%
at 0 0 is at
10<00:13:07.120><c> then</c><00:13:07.360><c> 20</c><00:13:07.920><c> 10</c><00:13:08.160><c> 30</c><00:13:08.959><c> so</c>

00:13:09.509 --> 00:13:09.519 align:start position:0%
10 then 20 10 30 so
 

00:13:09.519 --> 00:13:13.269 align:start position:0%
10 then 20 10 30 so
10<00:13:09.920><c> 20</c><00:13:10.399><c> 30</c><00:13:11.120><c> then</c><00:13:11.440><c> 40</c><00:13:12.000><c> 50</c><00:13:12.480><c> 60</c>

00:13:13.269 --> 00:13:13.279 align:start position:0%
10 20 30 then 40 50 60
 

00:13:13.279 --> 00:13:16.870 align:start position:0%
10 20 30 then 40 50 60
70<00:13:13.760><c> 89</c><00:13:14.959><c> so</c><00:13:15.120><c> here</c><00:13:15.680><c> three</c><00:13:15.920><c> cross</c><00:13:16.160><c> three</c><00:13:16.320><c> matrix</c>

00:13:16.870 --> 00:13:16.880 align:start position:0%
70 89 so here three cross three matrix
 

00:13:16.880 --> 00:13:18.069 align:start position:0%
70 89 so here three cross three matrix
total<00:13:17.200><c> we</c><00:13:17.360><c> have</c><00:13:17.680><c> nine</c>

00:13:18.069 --> 00:13:18.079 align:start position:0%
total we have nine
 

00:13:18.079 --> 00:13:21.350 align:start position:0%
total we have nine
elements<00:13:19.200><c> fine</c><00:13:19.760><c> so</c><00:13:20.320><c> now</c><00:13:20.560><c> what</c><00:13:20.800><c> next</c>

00:13:21.350 --> 00:13:21.360 align:start position:0%
elements fine so now what next
 

00:13:21.360 --> 00:13:24.629 align:start position:0%
elements fine so now what next
students<00:13:22.000><c> we</c><00:13:22.160><c> can</c><00:13:22.480><c> store</c><00:13:23.279><c> the</c><00:13:23.519><c> data</c><00:13:24.000><c> or</c><00:13:24.240><c> we</c><00:13:24.399><c> can</c>

00:13:24.629 --> 00:13:24.639 align:start position:0%
students we can store the data or we can
 

00:13:24.639 --> 00:13:26.710 align:start position:0%
students we can store the data or we can
represent<00:13:25.200><c> the</c><00:13:25.279><c> 2d</c><00:13:25.600><c> area</c><00:13:25.839><c> in</c><00:13:26.000><c> memory</c>

00:13:26.710 --> 00:13:26.720 align:start position:0%
represent the 2d area in memory
 

00:13:26.720 --> 00:13:29.509 align:start position:0%
represent the 2d area in memory
with<00:13:27.120><c> two</c><00:13:27.360><c> different</c><00:13:27.839><c> ways</c><00:13:28.320><c> the</c><00:13:28.480><c> first</c><00:13:28.800><c> way</c><00:13:29.120><c> is</c>

00:13:29.509 --> 00:13:29.519 align:start position:0%
with two different ways the first way is
 

00:13:29.519 --> 00:13:30.710 align:start position:0%
with two different ways the first way is
row<00:13:29.760><c> major</c>

00:13:30.710 --> 00:13:30.720 align:start position:0%
row major
 

00:13:30.720 --> 00:13:32.790 align:start position:0%
row major
okay<00:13:31.200><c> what</c><00:13:31.440><c> do</c><00:13:31.600><c> you</c><00:13:31.680><c> mean</c><00:13:31.839><c> by</c><00:13:32.000><c> row</c><00:13:32.240><c> major</c>

00:13:32.790 --> 00:13:32.800 align:start position:0%
okay what do you mean by row major
 

00:13:32.800 --> 00:13:33.990 align:start position:0%
okay what do you mean by row major
students<00:13:33.440><c> this</c>

00:13:33.990 --> 00:13:34.000 align:start position:0%
students this
 

00:13:34.000 --> 00:13:36.710 align:start position:0%
students this
representation<00:13:34.800><c> of</c><00:13:34.959><c> data</c><00:13:35.920><c> is</c><00:13:36.079><c> known</c><00:13:36.399><c> as</c>

00:13:36.710 --> 00:13:36.720 align:start position:0%
representation of data is known as
 

00:13:36.720 --> 00:13:37.509 align:start position:0%
representation of data is known as
promising

00:13:37.509 --> 00:13:37.519 align:start position:0%
promising
 

00:13:37.519 --> 00:13:39.509 align:start position:0%
promising
in<00:13:37.760><c> rhodometer</c><00:13:38.320><c> we</c><00:13:38.480><c> are</c><00:13:38.560><c> just</c><00:13:38.880><c> inserting</c><00:13:39.360><c> the</c>

00:13:39.509 --> 00:13:39.519 align:start position:0%
in rhodometer we are just inserting the
 

00:13:39.519 --> 00:13:41.110 align:start position:0%
in rhodometer we are just inserting the
element<00:13:40.240><c> provides</c>

00:13:41.110 --> 00:13:41.120 align:start position:0%
element provides
 

00:13:41.120 --> 00:13:44.310 align:start position:0%
element provides
okay<00:13:41.839><c> so</c><00:13:42.000><c> just</c><00:13:42.160><c> say</c><00:13:42.399><c> this</c><00:13:43.040><c> 10</c><00:13:43.360><c> to</c><00:13:43.519><c> 90</c><00:13:44.000><c> i'm</c><00:13:44.079><c> just</c>

00:13:44.310 --> 00:13:44.320 align:start position:0%
okay so just say this 10 to 90 i'm just
 

00:13:44.320 --> 00:13:45.350 align:start position:0%
okay so just say this 10 to 90 i'm just
writing<00:13:44.639><c> the</c><00:13:44.800><c> string</c>

00:13:45.350 --> 00:13:45.360 align:start position:0%
writing the string
 

00:13:45.360 --> 00:13:48.389 align:start position:0%
writing the string
from<00:13:45.680><c> 10</c><00:13:46.000><c> to</c><00:13:46.560><c> 90</c><00:13:47.199><c> and</c><00:13:47.279><c> then</c><00:13:47.519><c> what</c><00:13:47.760><c> happens</c>

00:13:48.389 --> 00:13:48.399 align:start position:0%
from 10 to 90 and then what happens
 

00:13:48.399 --> 00:13:51.910 align:start position:0%
from 10 to 90 and then what happens
what<00:13:48.560><c> happens</c><00:13:49.360><c> 10</c><00:13:50.000><c> the</c><00:13:50.240><c> address</c><00:13:50.639><c> is</c><00:13:51.279><c> 10</c><00:13:51.600><c> is</c>

00:13:51.910 --> 00:13:51.920 align:start position:0%
what happens 10 the address is 10 is
 

00:13:51.920 --> 00:13:55.350 align:start position:0%
what happens 10 the address is 10 is
c<00:13:53.680><c> first</c><00:13:53.920><c> element</c><00:13:54.399><c> is</c><00:13:54.720><c> 10</c>

00:13:55.350 --> 00:13:55.360 align:start position:0%
c first element is 10
 

00:13:55.360 --> 00:13:58.389 align:start position:0%
c first element is 10
which<00:13:55.680><c> is</c><00:13:55.839><c> known</c><00:13:56.079><c> as</c><00:13:56.399><c> a</c><00:13:56.639><c> of</c><00:13:56.800><c> 0</c><00:13:57.120><c> 0</c><00:13:57.680><c> the</c><00:13:57.839><c> next</c><00:13:58.240><c> is</c>

00:13:58.389 --> 00:13:58.399 align:start position:0%
which is known as a of 0 0 the next is
 

00:13:58.399 --> 00:14:00.470 align:start position:0%
which is known as a of 0 0 the next is
20<00:13:58.880><c> which</c><00:13:59.120><c> is</c><00:13:59.279><c> a</c><00:13:59.519><c> of</c><00:13:59.680><c> 0</c><00:13:59.920><c> 1</c>

00:14:00.470 --> 00:14:00.480 align:start position:0%
20 which is a of 0 1
 

00:14:00.480 --> 00:14:03.670 align:start position:0%
20 which is a of 0 1
third<00:14:00.720><c> will</c><00:14:00.959><c> become</c><00:14:01.440><c> a</c><00:14:01.680><c> of</c><00:14:01.760><c> 0</c><00:14:02.160><c> 2</c><00:14:02.720><c> so</c><00:14:03.279><c> when</c><00:14:03.519><c> you</c>

00:14:03.670 --> 00:14:03.680 align:start position:0%
third will become a of 0 2 so when you
 

00:14:03.680 --> 00:14:05.430 align:start position:0%
third will become a of 0 2 so when you
are<00:14:03.760><c> just</c><00:14:04.000><c> inserting</c><00:14:04.399><c> the</c><00:14:04.560><c> data</c><00:14:04.959><c> according</c><00:14:05.279><c> to</c>

00:14:05.430 --> 00:14:05.440 align:start position:0%
are just inserting the data according to
 

00:14:05.440 --> 00:14:06.389 align:start position:0%
are just inserting the data according to
the<00:14:05.600><c> row</c><00:14:05.839><c> bytes</c>

00:14:06.389 --> 00:14:06.399 align:start position:0%
the row bytes
 

00:14:06.399 --> 00:14:09.670 align:start position:0%
the row bytes
then<00:14:07.120><c> it</c><00:14:07.360><c> becomes</c><00:14:08.000><c> roommate</c><00:14:09.279><c> here</c>

00:14:09.670 --> 00:14:09.680 align:start position:0%
then it becomes roommate here
 

00:14:09.680 --> 00:14:12.870 align:start position:0%
then it becomes roommate here
are<00:14:09.839><c> the</c><00:14:11.440><c> column</c><00:14:11.760><c> major</c>

00:14:12.870 --> 00:14:12.880 align:start position:0%
are the column major
 

00:14:12.880 --> 00:14:14.870 align:start position:0%
are the column major
the<00:14:13.120><c> column</c><00:14:13.440><c> widget</c><00:14:13.760><c> data</c><00:14:14.079><c> are</c><00:14:14.240><c> inserted</c><00:14:14.639><c> such</c>

00:14:14.870 --> 00:14:14.880 align:start position:0%
the column widget data are inserted such
 

00:14:14.880 --> 00:14:16.949 align:start position:0%
the column widget data are inserted such
like<00:14:15.120><c> this</c><00:14:15.760><c> in</c><00:14:15.920><c> column</c><00:14:16.240><c> measure</c><00:14:16.560><c> the</c><00:14:16.639><c> data</c>

00:14:16.949 --> 00:14:16.959 align:start position:0%
like this in column measure the data
 

00:14:16.959 --> 00:14:18.069 align:start position:0%
like this in column measure the data
elements<00:14:17.279><c> are</c><00:14:17.440><c> inserted</c>

00:14:18.069 --> 00:14:18.079 align:start position:0%
elements are inserted
 

00:14:18.079 --> 00:14:20.790 align:start position:0%
elements are inserted
column<00:14:18.480><c> bytes</c><00:14:19.120><c> but</c><00:14:19.600><c> if</c><00:14:19.839><c> we</c><00:14:20.000><c> just</c><00:14:20.160><c> considering</c>

00:14:20.790 --> 00:14:20.800 align:start position:0%
column bytes but if we just considering
 

00:14:20.800 --> 00:14:21.670 align:start position:0%
column bytes but if we just considering
the<00:14:20.959><c> column</c>

00:14:21.670 --> 00:14:21.680 align:start position:0%
the column
 

00:14:21.680 --> 00:14:25.110 align:start position:0%
the column
data<00:14:22.399><c> for</c><00:14:22.560><c> this</c><00:14:22.800><c> particular</c><00:14:23.440><c> matrixes</c><00:14:24.560><c> then</c>

00:14:25.110 --> 00:14:25.120 align:start position:0%
data for this particular matrixes then
 

00:14:25.120 --> 00:14:27.110 align:start position:0%
data for this particular matrixes then
the<00:14:25.279><c> data</c><00:14:25.600><c> elements</c><00:14:26.079><c> are</c><00:14:26.560><c> four</c><00:14:26.800><c> column</c>

00:14:27.110 --> 00:14:27.120 align:start position:0%
the data elements are four column
 

00:14:27.120 --> 00:14:28.389 align:start position:0%
the data elements are four column
measure<00:14:27.839><c> like</c>

00:14:28.389 --> 00:14:28.399 align:start position:0%
measure like
 

00:14:28.399 --> 00:14:31.590 align:start position:0%
measure like
trend<00:14:29.199><c> 40</c><00:14:29.920><c> 70</c><00:14:30.959><c> then</c>

00:14:31.590 --> 00:14:31.600 align:start position:0%
trend 40 70 then
 

00:14:31.600 --> 00:14:35.310 align:start position:0%
trend 40 70 then
20<00:14:32.399><c> 50</c><00:14:33.120><c> 80</c><00:14:33.920><c> 10</c><00:14:34.560><c> 30</c>

00:14:35.310 --> 00:14:35.320 align:start position:0%
20 50 80 10 30
 

00:14:35.320 --> 00:14:39.189 align:start position:0%
20 50 80 10 30
69<00:14:37.199><c> so</c><00:14:37.519><c> such</c><00:14:37.920><c> like</c><00:14:38.160><c> this</c><00:14:38.399><c> students</c><00:14:38.880><c> we</c><00:14:39.040><c> are</c>

00:14:39.189 --> 00:14:39.199 align:start position:0%
69 so such like this students we are
 

00:14:39.199 --> 00:14:41.350 align:start position:0%
69 so such like this students we are
just<00:14:39.440><c> inserting</c><00:14:40.000><c> the</c><00:14:40.160><c> data</c><00:14:40.480><c> in</c><00:14:40.639><c> the</c><00:14:40.720><c> memory</c>

00:14:41.350 --> 00:14:41.360 align:start position:0%
just inserting the data in the memory
 

00:14:41.360 --> 00:14:43.670 align:start position:0%
just inserting the data in the memory
according<00:14:41.760><c> to</c><00:14:41.839><c> the</c><00:14:42.000><c> column</c><00:14:42.399><c> bytes</c><00:14:43.040><c> so</c><00:14:43.519><c> what</c>

00:14:43.670 --> 00:14:43.680 align:start position:0%
according to the column bytes so what
 

00:14:43.680 --> 00:14:44.870 align:start position:0%
according to the column bytes so what
will<00:14:43.920><c> become</c><00:14:44.399><c> the</c>

00:14:44.870 --> 00:14:44.880 align:start position:0%
will become the
 

00:14:44.880 --> 00:14:47.910 align:start position:0%
will become the
indexes<00:14:45.519><c> for</c><00:14:45.760><c> that</c><00:14:46.399><c> see</c><00:14:46.800><c> now</c><00:14:47.440><c> 10</c>

00:14:47.910 --> 00:14:47.920 align:start position:0%
indexes for that see now 10
 

00:14:47.920 --> 00:14:50.710 align:start position:0%
indexes for that see now 10
after<00:14:48.320><c> that</c><00:14:48.560><c> i'm</c><00:14:48.720><c> just</c><00:14:48.959><c> writing</c><00:14:49.360><c> 40</c><00:14:50.000><c> see</c><00:14:50.399><c> our</c>

00:14:50.710 --> 00:14:50.720 align:start position:0%
after that i'm just writing 40 see our
 

00:14:50.720 --> 00:14:51.189 align:start position:0%
after that i'm just writing 40 see our
10

00:14:51.189 --> 00:14:51.199 align:start position:0%
10
 

00:14:51.199 --> 00:14:53.509 align:start position:0%
10
after<00:14:51.440><c> that</c><00:14:51.680><c> i'm</c><00:14:51.839><c> writing</c><00:14:52.160><c> 40</c><00:14:52.800><c> after</c><00:14:53.120><c> that</c><00:14:53.360><c> i'm</c>

00:14:53.509 --> 00:14:53.519 align:start position:0%
after that i'm writing 40 after that i'm
 

00:14:53.519 --> 00:14:54.310 align:start position:0%
after that i'm writing 40 after that i'm
writing

00:14:54.310 --> 00:14:54.320 align:start position:0%
writing
 

00:14:54.320 --> 00:14:57.350 align:start position:0%
writing
70<00:14:55.360><c> because</c><00:14:55.839><c> this</c><00:14:56.079><c> is</c><00:14:56.160><c> a</c><00:14:56.320><c> column</c><00:14:56.800><c> major</c>

00:14:57.350 --> 00:14:57.360 align:start position:0%
70 because this is a column major
 

00:14:57.360 --> 00:15:00.629 align:start position:0%
70 because this is a column major
not<00:14:58.160><c> row</c><00:14:58.399><c> major</c><00:14:59.120><c> fine</c><00:14:59.680><c> so</c><00:14:59.839><c> the</c><00:14:59.920><c> next</c><00:15:00.240><c> is</c>

00:15:00.629 --> 00:15:00.639 align:start position:0%
not row major fine so the next is
 

00:15:00.639 --> 00:15:02.550 align:start position:0%
not row major fine so the next is
what<00:15:00.800><c> do</c><00:15:00.880><c> you</c><00:15:00.959><c> mean</c><00:15:01.120><c> by</c><00:15:01.279><c> the</c><00:15:01.360><c> rev</c><00:15:01.600><c> measure</c><00:15:02.320><c> room</c>

00:15:02.550 --> 00:15:02.560 align:start position:0%
what do you mean by the rev measure room
 

00:15:02.560 --> 00:15:03.990 align:start position:0%
what do you mean by the rev measure room
with<00:15:02.720><c> the</c><00:15:02.800><c> students</c><00:15:03.199><c> it</c><00:15:03.440><c> means</c>

00:15:03.990 --> 00:15:04.000 align:start position:0%
with the students it means
 

00:15:04.000 --> 00:15:06.389 align:start position:0%
with the students it means
no<00:15:04.160><c> matter</c><00:15:04.480><c> here</c><00:15:04.880><c> the</c><00:15:05.040><c> elements</c><00:15:05.440><c> are</c><00:15:05.600><c> stored</c>

00:15:06.389 --> 00:15:06.399 align:start position:0%
no matter here the elements are stored
 

00:15:06.399 --> 00:15:07.110 align:start position:0%
no matter here the elements are stored
according<00:15:06.720><c> to</c>

00:15:07.110 --> 00:15:07.120 align:start position:0%
according to
 

00:15:07.120 --> 00:15:09.590 align:start position:0%
according to
robots<00:15:07.920><c> in</c><00:15:08.160><c> column</c><00:15:08.480><c> meter</c><00:15:08.880><c> the</c><00:15:09.040><c> elements</c><00:15:09.440><c> are</c>

00:15:09.590 --> 00:15:09.600 align:start position:0%
robots in column meter the elements are
 

00:15:09.600 --> 00:15:10.230 align:start position:0%
robots in column meter the elements are
stored

00:15:10.230 --> 00:15:10.240 align:start position:0%
stored
 

00:15:10.240 --> 00:15:13.750 align:start position:0%
stored
according<00:15:10.720><c> to</c><00:15:10.959><c> the</c><00:15:11.440><c> column</c><00:15:11.920><c> twice</c><00:15:13.199><c> so</c>

00:15:13.750 --> 00:15:13.760 align:start position:0%
according to the column twice so
 

00:15:13.760 --> 00:15:16.949 align:start position:0%
according to the column twice so
students<00:15:14.560><c> in</c><00:15:14.720><c> this</c><00:15:14.959><c> lecture</c><00:15:16.399><c> we</c>

00:15:16.949 --> 00:15:16.959 align:start position:0%
students in this lecture we
 

00:15:16.959 --> 00:15:19.430 align:start position:0%
students in this lecture we
learn<00:15:17.440><c> about</c><00:15:17.839><c> the</c><00:15:18.240><c> array</c><00:15:18.800><c> introduction</c><00:15:19.360><c> of</c>

00:15:19.430 --> 00:15:19.440 align:start position:0%
learn about the array introduction of
 

00:15:19.440 --> 00:15:20.230 align:start position:0%
learn about the array introduction of
the<00:15:19.600><c> array</c>

00:15:20.230 --> 00:15:20.240 align:start position:0%
the array
 

00:15:20.240 --> 00:15:22.710 align:start position:0%
the array
then<00:15:20.800><c> how</c><00:15:21.040><c> can</c><00:15:21.279><c> we</c><00:15:21.519><c> represent</c><00:15:22.079><c> the</c><00:15:22.240><c> elements</c>

00:15:22.710 --> 00:15:22.720 align:start position:0%
then how can we represent the elements
 

00:15:22.720 --> 00:15:23.829 align:start position:0%
then how can we represent the elements
in<00:15:22.880><c> 1d</c><00:15:23.279><c> array</c>

00:15:23.829 --> 00:15:23.839 align:start position:0%
in 1d array
 

00:15:23.839 --> 00:15:27.189 align:start position:0%
in 1d array
and<00:15:24.000><c> 2dm</c><00:15:24.720><c> we</c><00:15:24.880><c> have</c><00:15:25.120><c> also</c><00:15:25.360><c> seen</c><00:15:25.839><c> the</c><00:15:26.079><c> examples</c>

00:15:27.189 --> 00:15:27.199 align:start position:0%
and 2dm we have also seen the examples
 

00:15:27.199 --> 00:15:30.870 align:start position:0%
and 2dm we have also seen the examples
of<00:15:27.839><c> only</c><00:15:28.399><c> array</c><00:15:29.199><c> that</c><00:15:29.680><c> how</c><00:15:29.920><c> can</c><00:15:30.079><c> we</c><00:15:30.320><c> calculate</c>

00:15:30.870 --> 00:15:30.880 align:start position:0%
of only array that how can we calculate
 

00:15:30.880 --> 00:15:31.990 align:start position:0%
of only array that how can we calculate
the<00:15:30.959><c> memory</c><00:15:31.360><c> address</c>

00:15:31.990 --> 00:15:32.000 align:start position:0%
the memory address
 

00:15:32.000 --> 00:15:35.030 align:start position:0%
the memory address
in<00:15:32.480><c> 1d</c><00:15:33.759><c> so</c><00:15:34.240><c> if</c><00:15:34.399><c> you</c><00:15:34.560><c> have</c>

00:15:35.030 --> 00:15:35.040 align:start position:0%
in 1d so if you have
 

00:15:35.040 --> 00:15:37.749 align:start position:0%
in 1d so if you have
any<00:15:35.199><c> doubt</c><00:15:35.519><c> in</c><00:15:35.600><c> this</c><00:15:35.839><c> lecture</c><00:15:36.560><c> then</c><00:15:37.120><c> please</c>

00:15:37.749 --> 00:15:37.759 align:start position:0%
any doubt in this lecture then please
 

00:15:37.759 --> 00:15:39.509 align:start position:0%
any doubt in this lecture then please
feel<00:15:38.000><c> free</c><00:15:38.240><c> to</c><00:15:38.480><c> ask</c><00:15:38.800><c> me</c>

00:15:39.509 --> 00:15:39.519 align:start position:0%
feel free to ask me
 

00:15:39.519 --> 00:15:51.279 align:start position:0%
feel free to ask me
thank<00:15:39.680><c> you</c><00:15:39.839><c> so</c><00:15:48.279><c> much</c>

